%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Press_Kit_CMYK.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: fmod
%%CreationDate: 20/04/10
%%BoundingBox: 0 0 523 416
%%HiResBoundingBox: 0 0 522.3389 415.9531
%%CropBox: 0 0 522.3389 415.9531
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">FMOD_LOGO</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-04-20T19:24:39+10:00</xmp:CreateDate>
         <xmp:ModifyDate>2010-04-20T19:24:39+10:00</xmp:ModifyDate>
         <xmp:MetadataDate>2010-04-20T19:24:39+10:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qpXV3a2lu9zdTJb28&#xA;Q5STSsERR4szEAYq+Vf+co/zk1S71i18k+UtR/3HvCj6lcWMoJuJZyQlv6kZ+wq05AN8Rah6ZIBU&#xA;k8kf84vebl8zafcS6/of6Q0u5trzUtJjunmu4FSRXKSJHGwDbU60r3xtX01efnD+V1lrP6GuvM+n&#xA;xaiG9N4jMvFH6cXlH7tGFNwzDBSswBBAINQehwKw/Ufzg/LDTtaOi33mWxg1JH9KSFpRRHrTjJIP&#xA;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&#xA;dirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:04801174072068119457EADEF14814C1</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:04801174072068119457EADEF14814C1</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:D9389E13F463DE119AF8DE126D2563BB</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:03801174072068119457EADEF14814C1</stRef:instanceID>
            <stRef:documentID>xmp.did:03801174072068119457EADEF14814C1</stRef:documentID>
            <stRef:originalDocumentID>uuid:D9389E13F463DE119AF8DE126D2563BB</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01801174072068118DBBF373649C86FB</stEvt:instanceID>
                  <stEvt:when>2010-01-20T14:35:46+11:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01801174072068119457EADEF14814C1</stEvt:instanceID>
                  <stEvt:when>2010-04-20T19:12:58+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:03801174072068119457EADEF14814C1</stEvt:instanceID>
                  <stEvt:when>2010-04-20T19:21:38+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:04801174072068119457EADEF14814C1</stEvt:instanceID>
                  <stEvt:when>2010-04-20T19:24:39+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.999929</stDim:w>
            <stDim:h>296.999959</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.003052</xmpG:cyan>
                           <xmpG:magenta>0.003052</xmpG:magenta>
                           <xmpG:yellow>0.003052</xmpG:yellow>
                           <xmpG:black>0.003052</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>71.673149</xmpG:cyan>
                           <xmpG:magenta>70.128937</xmpG:magenta>
                           <xmpG:yellow>59.005112</xmpG:yellow>
                           <xmpG:black>82.409393</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>60c 40m 0y 100k</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>92.867928</xmpG:cyan>
                           <xmpG:magenta>80.788887</xmpG:magenta>
                           <xmpG:yellow>58.117031</xmpG:yellow>
                           <xmpG:black>93.215836</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 8.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -415.953 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 415.953 li
522.339 415.953 li
522.339 0 li
cp
clp
[1 0 0 1 0 0 ]ct
233.867 249.275 mo
233.867 255.227 229.043 260.051 223.092 260.051 cv
10.7734 260.051 li
4.82227 260.051 0 255.227 0 249.275 cv
0 166.146 li
0 160.195 4.82227 155.371 10.7734 155.371 cv
223.092 155.371 li
229.043 155.371 233.867 160.195 233.867 166.146 cv
233.867 249.275 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.928679 .807889 .58117 .932158 cmyk
f
198.111 223.385 mo
199.299 223.385 li
199.906 223.385 200.566 223.504 200.566 224.27 cv
200.566 225.18 199.84 225.219 199.049 225.219 cv
198.111 225.219 li
198.111 223.385 li
cp
197.213 228.428 mo
198.111 228.428 li
198.111 225.945 li
199.063 225.945 li
200.633 228.428 li
201.596 228.428 li
199.947 225.881 li
200.803 225.787 201.463 225.352 201.463 224.309 cv
201.463 223.199 200.816 222.658 199.443 222.658 cv
197.213 222.658 li
197.213 228.428 li
cp
195.162 225.648 mo
195.162 223.285 196.93 221.463 199.24 221.463 cv
201.525 221.463 203.293 223.285 203.293 225.648 cv
203.293 228.064 201.525 229.887 199.24 229.887 cv
196.93 229.887 195.162 228.064 195.162 225.648 cv
cp
194.264 225.648 mo
194.264 228.486 196.535 230.611 199.24 230.611 cv
201.934 230.611 204.191 228.486 204.191 225.648 cv
204.191 222.863 201.934 220.738 199.24 220.738 cv
196.535 220.738 194.264 222.863 194.264 225.648 cv
cp
3.05175e-05 3.05175e-05 3.05175e-05 3.05175e-05 cmyk
ef
60.4355 205.025 mo
60.4355 207.851 58.1426 210.146 55.3125 210.146 cv
52.4844 210.146 50.1914 207.851 50.1914 205.025 cv
50.1914 202.195 52.4844 199.9 55.3125 199.9 cv
58.1426 199.9 60.4355 202.195 60.4355 205.025 cv
cp
f
183.707 217.791 mo
183.883 217.521 184.049 217.219 184.197 216.893 cv
185.002 215.32 186.658 214.27 188.547 214.27 cv
191.229 214.27 193.406 216.445 193.406 219.129 cv
193.406 219.814 193.266 220.453 193.01 221.041 cv
192.873 221.33 li
190.189 226.854 184.506 230.611 178.068 230.611 cv
169.127 230.611 161.879 223.363 161.879 214.422 cv
161.879 205.478 169.127 198.23 178.068 198.23 cv
178.779 198.23 li
181.439 198.345 183.953 199.099 186.158 200.349 cv
186.158 184.81 li
195.781 184.81 li
195.781 206.714 li
195.781 209.256 193.539 211.967 190.604 211.967 cv
187.285 211.967 184.77 210.898 182.82 209.242 cv
181.705 208.373 180.301 207.853 178.779 207.853 cv
178.068 207.853 li
174.441 207.853 171.5 210.793 171.5 214.422 cv
171.5 218.049 174.441 220.988 178.068 220.988 cv
180.459 220.988 182.559 219.703 183.707 217.791 cv
cp
f
149.699 214.422 mo
149.699 210.793 146.758 207.853 143.131 207.853 cv
139.504 207.853 136.561 210.793 136.561 214.422 cv
136.561 218.049 139.504 220.988 143.131 220.988 cv
146.758 220.988 149.699 218.049 149.699 214.422 cv
cp
126.939 214.422 mo
126.939 205.478 134.189 198.23 143.131 198.23 cv
152.072 198.23 159.32 205.478 159.32 214.422 cv
159.32 223.363 152.072 230.611 143.131 230.611 cv
134.189 230.611 126.939 223.363 126.939 214.422 cv
cp
f
107.367 207.832 mo
106.559 207.832 105.869 208.361 105.635 209.092 cv
101.766 222.439 li
100.367 227.162 96.0234 230.611 90.8438 230.611 cv
85.6621 230.611 81.3203 227.162 79.9219 222.439 cv
76.0527 209.092 li
75.8164 208.361 75.127 207.832 74.3184 207.832 cv
73.5117 207.832 72.8164 208.361 72.5801 209.092 cv
68.7129 222.439 li
67.3145 227.162 62.9375 230.611 57.7559 230.611 cv
55.0723 230.611 li
55.0723 221.01 li
57.791 221.01 li
58.5918 221.01 59.2637 220.488 59.502 219.748 cv
63.3711 206.402 li
64.7695 201.681 69.1367 198.23 74.3184 198.23 cv
79.502 198.23 83.8633 201.681 85.2617 206.402 cv
89.1309 219.748 li
89.3672 220.488 90.041 221.01 90.8438 221.01 cv
91.6445 221.01 92.3184 220.488 92.5566 219.748 cv
96.4238 206.402 li
97.8223 201.681 102.186 198.23 107.367 198.23 cv
112.549 198.23 116.916 201.681 118.314 206.402 cv
122.184 219.748 li
122.42 220.488 123.094 221.01 123.896 221.01 cv
126.613 221.01 li
126.613 230.611 li
123.93 230.611 li
118.748 230.611 114.373 227.162 112.975 222.439 cv
109.105 209.092 li
108.869 208.361 108.176 207.832 107.367 207.832 cv
cp
f
54.0645 194.433 mo
50.4355 194.433 47.4961 197.375 47.4961 201.001 cv
47.4961 230.611 li
37.873 230.611 li
37.873 210.148 li
29.6758 210.148 li
29.6758 200.554 li
37.8789 200.554 li
38.1172 191.82 45.2715 184.81 54.0645 184.81 cv
63.6719 184.81 li
63.6719 194.433 li
54.0645 194.433 li
cp
f
522.339 249.275 mo
522.339 255.227 517.515 260.051 511.564 260.051 cv
299.246 260.051 li
293.295 260.051 288.471 255.227 288.471 249.275 cv
288.471 166.146 li
288.471 160.195 293.295 155.371 299.246 155.371 cv
511.564 155.371 li
517.515 155.371 522.339 160.195 522.339 166.146 cv
522.339 249.275 li
cp
f
486.583 223.385 mo
487.771 223.385 li
488.378 223.385 489.038 223.504 489.038 224.27 cv
489.038 225.18 488.313 225.219 487.521 225.219 cv
486.583 225.219 li
486.583 223.385 li
cp
485.685 228.428 mo
486.583 228.428 li
486.583 225.945 li
487.534 225.945 li
489.104 228.428 li
490.068 228.428 li
488.419 225.881 li
489.275 225.787 489.936 225.352 489.936 224.309 cv
489.936 223.199 489.289 222.658 487.916 222.658 cv
485.685 222.658 li
485.685 228.428 li
cp
483.635 225.648 mo
483.635 223.285 485.402 221.463 487.713 221.463 cv
489.998 221.463 491.766 223.285 491.766 225.648 cv
491.766 228.064 489.998 229.887 487.713 229.887 cv
485.402 229.887 483.635 228.064 483.635 225.648 cv
cp
482.736 225.648 mo
482.736 228.486 485.007 230.611 487.713 230.611 cv
490.405 230.611 492.663 228.486 492.663 225.648 cv
492.663 222.863 490.405 220.738 487.713 220.738 cv
485.007 220.738 482.736 222.863 482.736 225.648 cv
cp
.928679 .807889 .58117 .932158 cmyk
ef
348.908 205.025 mo
348.908 207.851 346.613 210.146 343.785 210.146 cv
340.955 210.146 338.664 207.851 338.664 205.025 cv
338.664 202.195 340.955 199.9 343.785 199.9 cv
346.613 199.9 348.908 202.195 348.908 205.025 cv
cp
f
472.18 217.791 mo
472.354 217.521 472.521 217.219 472.669 216.893 cv
473.474 215.32 475.131 214.27 477.019 214.27 cv
479.701 214.27 481.879 216.445 481.879 219.129 cv
481.879 219.814 481.737 220.453 481.482 221.041 cv
481.345 221.33 li
478.662 226.854 472.979 230.611 466.54 230.611 cv
457.6 230.611 450.351 223.363 450.351 214.422 cv
450.351 205.478 457.6 198.23 466.54 198.23 cv
467.251 198.23 li
469.911 198.345 472.425 199.099 474.631 200.349 cv
474.631 184.81 li
484.253 184.81 li
484.253 206.714 li
484.253 209.256 482.011 211.967 479.075 211.967 cv
475.758 211.967 473.241 210.898 471.292 209.242 cv
470.178 208.373 468.773 207.853 467.251 207.853 cv
466.54 207.853 li
462.913 207.853 459.973 210.793 459.973 214.422 cv
459.973 218.049 462.913 220.988 466.54 220.988 cv
468.932 220.988 471.03 219.703 472.18 217.791 cv
cp
f
438.171 214.422 mo
438.171 210.793 435.229 207.853 431.603 207.853 cv
427.976 207.853 425.033 210.793 425.033 214.422 cv
425.033 218.049 427.976 220.988 431.603 220.988 cv
435.229 220.988 438.171 218.049 438.171 214.422 cv
cp
415.412 214.422 mo
415.412 205.478 422.661 198.23 431.603 198.23 cv
440.544 198.23 447.793 205.478 447.793 214.422 cv
447.793 223.363 440.544 230.611 431.603 230.611 cv
422.661 230.611 415.412 223.363 415.412 214.422 cv
cp
f
395.838 207.832 mo
395.029 207.832 394.342 208.361 394.105 209.092 cv
390.236 222.439 li
388.838 227.162 384.496 230.611 379.314 230.611 cv
374.135 230.611 369.791 227.162 368.393 222.439 cv
364.523 209.092 li
364.289 208.361 363.6 207.832 362.791 207.832 cv
361.982 207.832 361.289 208.361 361.051 209.092 cv
357.184 222.439 li
355.785 227.162 351.408 230.611 346.229 230.611 cv
343.543 230.611 li
343.543 221.01 li
346.262 221.01 li
347.064 221.01 347.736 220.488 347.975 219.748 cv
351.842 206.402 li
353.24 201.681 357.609 198.23 362.791 198.23 cv
367.973 198.23 372.336 201.681 373.732 206.402 cv
377.602 219.748 li
377.84 220.488 378.514 221.01 379.314 221.01 cv
380.117 221.01 380.789 220.488 381.027 219.748 cv
384.896 206.402 li
386.293 201.681 390.656 198.23 395.838 198.23 cv
401.02 198.23 405.389 201.681 406.787 206.402 cv
410.654 219.748 li
410.893 220.488 411.566 221.01 412.368 221.01 cv
415.086 221.01 li
415.086 230.611 li
412.402 230.611 li
407.219 230.611 402.844 227.162 401.445 222.439 cv
397.578 209.092 li
397.342 208.361 396.646 207.832 395.838 207.832 cv
cp
f
342.537 194.433 mo
338.908 194.433 335.969 197.375 335.969 201.001 cv
335.969 230.611 li
326.346 230.611 li
326.346 210.148 li
318.148 210.148 li
318.148 200.554 li
326.352 200.554 li
326.588 191.82 333.744 184.81 342.537 184.81 cv
352.145 184.81 li
352.145 194.433 li
342.537 194.433 li
cp
f
378.103 374.811 mo
378.103 380.762 373.279 385.584 367.328 385.584 cv
155.01 385.584 li
149.059 385.584 144.235 380.762 144.235 374.811 cv
144.235 291.682 li
144.235 285.73 149.059 280.906 155.01 280.906 cv
367.328 280.906 li
373.279 280.906 378.103 285.73 378.103 291.682 cv
378.103 374.811 li
cp
level3{
gsave
clp
[233.867 0 0 233.867 144.235 333.245 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 0 3.05175e-05 3.05175e-05 ]
/C1 [1 1 0 0 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[233.867 0 0 233.867 144.235 333.245 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 <~!!!$$!sAc3#7(VC$OdIS%hK<c',2/s(Dn#.)]Tk>+!;^N,:"Q^-R^Dn.kE8)0/,+91GgsI2`NfY4$5Yi
5<qM$6UX@47n?3D92&&T:Jand;cHat='/U/>?kH??XR;O@q9._B4u!oCM[j*DfB]:F*)PJGBeCZH[L6j
It3*%K7nr5LPUeEMi<XUO-#KePE_>uQ^F20S"-%@T:hmPUSO``Vl6SpX/rG+YHY:;Za@-K\%&u[]=bhk
^VI\&_o0O6a2lBFbKS5Vcd:(fe'uq!f@\d1gYCWAhr*JQj5f=akNM0qlg4$,n*ol<oCV_Lp\=R\qu$El
~>
0 0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
342.347 348.92 mo
343.535 348.92 li
344.143 348.92 344.803 349.037 344.803 349.803 cv
344.803 350.715 344.076 350.754 343.284 350.754 cv
342.347 350.754 li
342.347 348.92 li
cp
341.448 353.961 mo
342.347 353.961 li
342.347 351.48 li
343.297 351.48 li
344.868 353.961 li
345.832 353.961 li
344.182 351.414 li
345.039 351.322 345.699 350.887 345.699 349.844 cv
345.699 348.734 345.053 348.193 343.68 348.193 cv
341.448 348.193 li
341.448 353.961 li
cp
339.398 351.184 mo
339.398 348.82 341.166 346.998 343.477 346.998 cv
345.762 346.998 347.529 348.82 347.529 351.184 cv
347.529 353.598 345.762 355.42 343.477 355.42 cv
341.166 355.42 339.398 353.598 339.398 351.184 cv
cp
338.5 351.184 mo
338.5 354.021 340.77 356.146 343.477 356.146 cv
346.169 356.146 348.426 354.021 348.426 351.184 cv
348.426 348.398 346.169 346.273 343.477 346.273 cv
340.77 346.273 338.5 348.398 338.5 351.184 cv
cp
3.05175e-05 3.05175e-05 3.05175e-05 3.05175e-05 cmyk
ef
204.672 330.559 mo
204.672 333.387 202.379 335.68 199.549 335.68 cv
196.721 335.68 194.428 333.387 194.428 330.559 cv
194.428 327.729 196.721 325.436 199.549 325.436 cv
202.379 325.436 204.672 327.729 204.672 330.559 cv
cp
f
327.943 343.326 mo
328.117 343.057 328.284 342.752 328.433 342.426 cv
329.236 340.855 330.895 339.803 332.782 339.803 cv
335.465 339.803 337.643 341.979 337.643 344.662 cv
337.643 345.348 337.5 345.988 337.246 346.576 cv
337.108 346.865 li
334.426 352.389 328.742 356.146 322.305 356.146 cv
313.363 356.146 306.114 348.896 306.114 339.955 cv
306.114 331.014 313.363 323.764 322.305 323.764 cv
323.015 323.764 li
325.675 323.879 328.188 324.635 330.395 325.885 cv
330.395 310.346 li
340.017 310.346 li
340.017 332.248 li
340.017 334.789 337.774 337.5 334.838 337.5 cv
331.521 337.5 329.004 336.434 327.057 334.775 cv
325.941 333.906 324.537 333.387 323.015 333.387 cv
322.305 333.387 li
318.677 333.387 315.736 336.328 315.736 339.955 cv
315.736 343.584 318.677 346.523 322.305 346.523 cv
324.695 346.523 326.794 345.238 327.943 343.326 cv
cp
f
293.935 339.955 mo
293.935 336.328 290.993 333.387 287.365 333.387 cv
283.74 333.387 280.797 336.328 280.797 339.955 cv
280.797 343.584 283.74 346.523 287.365 346.523 cv
290.993 346.523 293.935 343.584 293.935 339.955 cv
cp
271.176 339.955 mo
271.176 331.014 278.425 323.764 287.365 323.764 cv
296.308 323.764 303.557 331.014 303.557 339.955 cv
303.557 348.896 296.308 356.146 287.365 356.146 cv
278.425 356.146 271.176 348.896 271.176 339.955 cv
cp
f
251.603 333.367 mo
250.794 333.367 250.105 333.895 249.87 334.627 cv
246 347.975 li
244.603 352.695 240.26 356.145 235.078 356.146 cv
229.898 356.145 225.555 352.695 224.156 347.975 cv
220.287 334.627 li
220.053 333.895 219.363 333.367 218.555 333.367 cv
217.747 333.367 217.053 333.895 216.815 334.627 cv
212.947 347.975 li
211.549 352.695 207.172 356.145 201.992 356.146 cv
199.308 356.146 li
199.308 346.545 li
202.025 346.545 li
202.828 346.545 203.5 346.021 203.738 345.283 cv
207.607 331.938 li
209.005 327.215 213.373 323.766 218.555 323.764 cv
223.736 323.766 228.1 327.215 229.497 331.938 cv
233.365 345.283 li
233.604 346.021 234.277 346.545 235.078 346.545 cv
235.881 346.545 236.554 346.021 236.792 345.283 cv
240.66 331.938 li
242.059 327.215 246.42 323.766 251.603 323.764 cv
256.783 323.766 261.152 327.215 262.551 331.938 cv
266.42 345.283 li
266.656 346.021 267.33 346.545 268.131 346.545 cv
270.85 346.545 li
270.85 356.146 li
268.166 356.146 li
262.983 356.145 258.607 352.695 257.21 347.975 cv
253.342 334.627 li
253.105 333.895 252.41 333.367 251.603 333.367 cv
cp
f
198.301 319.969 mo
194.672 319.969 191.732 322.908 191.732 326.537 cv
191.732 356.146 li
182.109 356.146 li
182.109 335.684 li
173.912 335.684 li
173.912 326.088 li
182.115 326.088 li
182.353 317.354 189.508 310.346 198.301 310.346 cv
207.908 310.346 li
207.908 319.969 li
198.301 319.969 li
cp
f
486.582 38.5742 mo
487.77 38.5742 li
488.377 38.5742 489.037 38.6914 489.037 39.457 cv
489.037 40.3691 488.311 40.4082 487.52 40.4082 cv
486.582 40.4082 li
486.582 38.5742 li
cp
485.684 43.6152 mo
486.582 43.6152 li
486.582 41.1348 li
487.533 41.1348 li
489.104 43.6152 li
490.066 43.6152 li
488.418 41.0684 li
489.273 40.9766 489.936 40.541 489.936 39.498 cv
489.936 38.3887 489.287 37.8477 487.914 37.8477 cv
485.684 37.8477 li
485.684 43.6152 li
cp
483.633 40.8379 mo
483.633 38.4746 485.4 36.6523 487.711 36.6523 cv
489.996 36.6523 491.764 38.4746 491.764 40.8379 cv
491.764 43.252 489.996 45.0742 487.711 45.0742 cv
485.4 45.0742 483.633 43.252 483.633 40.8379 cv
cp
482.736 40.8379 mo
482.736 43.6758 485.006 45.8008 487.711 45.8008 cv
490.404 45.8008 492.662 43.6758 492.662 40.8379 cv
492.662 38.0527 490.404 35.9277 487.711 35.9277 cv
485.006 35.9277 482.736 38.0527 482.736 40.8379 cv
cp
ef
348.906 20.2119 mo
348.906 23.041 346.613 25.334 343.783 25.334 cv
340.955 25.334 338.662 23.041 338.662 20.2119 cv
338.662 17.3828 340.955 15.0898 343.783 15.0898 cv
346.613 15.0898 348.906 17.3828 348.906 20.2119 cv
cp
f
472.178 32.9805 mo
472.354 32.7109 472.52 32.4063 472.668 32.082 cv
473.473 30.5098 475.131 29.457 477.018 29.457 cv
479.701 29.457 481.877 31.6328 481.877 34.3184 cv
481.877 35.002 481.736 35.6426 481.48 36.2305 cv
481.344 36.5195 li
478.66 42.041 472.979 45.8008 466.539 45.8008 cv
457.598 45.8008 450.35 38.5508 450.35 29.6094 cv
450.35 20.668 457.598 13.418 466.539 13.418 cv
467.25 13.418 li
469.91 13.5332 472.424 14.2881 474.629 15.5391 cv
474.629 0 li
484.252 0 li
484.252 21.9033 li
484.252 24.4434 482.01 27.1543 479.074 27.1543 cv
475.756 27.1543 473.24 26.0879 471.291 24.4297 cv
470.176 23.5605 468.771 23.041 467.25 23.041 cv
466.539 23.041 li
462.912 23.041 459.971 25.9824 459.971 29.6094 cv
459.971 33.2363 462.912 36.1777 466.539 36.1777 cv
468.93 36.1777 471.029 34.8926 472.178 32.9805 cv
cp
f
438.17 29.6094 mo
438.17 25.9824 435.229 23.041 431.602 23.041 cv
427.975 23.041 425.033 25.9824 425.033 29.6094 cv
425.033 33.2363 427.975 36.1777 431.602 36.1777 cv
435.229 36.1777 438.17 33.2363 438.17 29.6094 cv
cp
415.41 29.6094 mo
415.41 20.668 422.66 13.418 431.602 13.418 cv
440.543 13.418 447.791 20.668 447.791 29.6094 cv
447.791 38.5508 440.543 45.8008 431.602 45.8008 cv
422.66 45.8008 415.41 38.5508 415.41 29.6094 cv
cp
f
395.838 23.0205 mo
395.029 23.0205 394.34 23.5488 394.105 24.2813 cv
390.236 37.627 li
388.838 42.3496 384.494 45.7988 379.314 45.8008 cv
374.133 45.7988 369.789 42.3496 368.393 37.627 cv
364.523 24.2813 li
364.287 23.5488 363.598 23.0205 362.789 23.0205 cv
361.982 23.0205 361.287 23.5488 361.051 24.2813 cv
357.184 37.627 li
355.785 42.3496 351.408 45.7988 346.227 45.8008 cv
343.543 45.8008 li
343.543 36.1992 li
346.262 36.1992 li
347.063 36.1992 347.736 35.6758 347.973 34.9375 cv
351.842 21.5918 li
353.24 16.8691 357.607 13.4199 362.789 13.418 cv
367.973 13.4199 372.334 16.8691 373.732 21.5918 cv
377.602 34.9375 li
377.84 35.6758 378.512 36.1992 379.314 36.1992 cv
380.115 36.1992 380.789 35.6758 381.027 34.9375 cv
384.895 21.5918 li
386.293 16.8691 390.656 13.4199 395.838 13.418 cv
401.02 13.4199 405.387 16.8691 406.785 21.5918 cv
410.654 34.9375 li
410.891 35.6758 411.564 36.1992 412.367 36.1992 cv
415.084 36.1992 li
415.084 45.8008 li
412.4 45.8008 li
407.219 45.7988 402.844 42.3496 401.445 37.627 cv
397.576 24.2813 li
397.34 23.5488 396.645 23.0205 395.838 23.0205 cv
cp
f
342.535 9.62207 mo
338.908 9.62207 335.969 12.5625 335.969 16.1895 cv
335.969 45.8008 li
326.344 45.8008 li
326.344 25.3379 li
318.146 25.3379 li
318.146 15.7441 li
326.352 15.7441 li
326.588 7.00781 333.742 0 342.535 0 cv
352.143 0 li
352.143 9.62207 li
342.535 9.62207 li
cp
f
344.285 67.6953 mo
344.621 67.6953 344.846 67.9058 344.846 68.2559 cv
344.846 68.6201 344.649 68.8442 344.285 68.8442 cv
340.182 68.8442 li
340.182 72.7939 li
340.182 73.1865 339.873 73.4385 339.494 73.4385 cv
339.074 73.4385 338.836 73.2285 338.836 72.7939 cv
338.836 64.1235 li
338.836 63.7173 339.032 63.4653 339.494 63.4653 cv
344.691 63.4653 li
345.056 63.4653 345.279 63.6753 345.279 64.0537 cv
345.279 64.4458 345.084 64.6699 344.691 64.6699 cv
340.182 64.6699 li
340.182 67.6953 li
344.285 67.6953 li
cp
.928679 .807889 .58117 .932158 cmyk
f
349.113 67.0229 mo
347.518 67.0229 346.984 68.3257 346.984 69.7266 cv
346.984 71.1831 347.475 72.458 349.156 72.458 cv
350.795 72.458 351.285 71.0713 351.285 69.6704 cv
351.285 68.2275 350.669 67.0229 349.113 67.0229 cv
cp
349.072 73.4946 mo
346.187 73.4946 345.668 71.2114 345.668 69.6987 cv
345.668 67.4854 346.83 65.9585 349.17 65.9585 cv
351.453 65.9585 352.602 67.4712 352.602 69.6563 cv
352.602 70.959 352.224 73.4946 349.072 73.4946 cv
cp
f
354.18 66.603 mo
354.18 66.2104 354.418 66.0146 354.824 66.0146 cv
355.272 66.0146 355.398 66.3369 355.398 66.687 cv
355.398 67.3311 li
355.707 66.4907 356.477 66.0146 357.317 66.0146 cv
357.724 66.0146 358.061 66.1826 358.061 66.645 cv
358.061 67.1353 357.738 67.2051 357.289 67.2754 cv
355.777 67.5132 355.455 68.6338 355.455 69.8525 cv
355.455 72.8501 li
355.455 73.2705 355.217 73.4385 354.811 73.4385 cv
354.445 73.4385 354.18 73.2847 354.18 72.8501 cv
354.18 66.603 li
cp
f
366.543 67.0229 mo
365.045 67.0229 364.471 68.3398 364.471 69.6563 cv
364.471 70.959 364.933 72.458 366.488 72.458 cv
368.127 72.458 368.463 71.0435 368.463 69.6846 cv
368.463 68.3818 368.07 67.0229 366.543 67.0229 cv
cp
364.484 67.0093 mo
365.059 66.2524 365.871 65.9585 366.796 65.9585 cv
368.995 65.9585 369.808 67.8213 369.808 69.7407 cv
369.808 71.7017 368.855 73.5088 366.684 73.5088 cv
365.829 73.5088 365.059 73.2144 364.484 72.5703 cv
364.484 72.7803 li
364.484 73.1865 364.274 73.4385 363.868 73.4385 cv
363.477 73.4385 363.224 73.2144 363.224 72.8223 cv
363.224 63.9834 li
363.224 63.6191 363.49 63.3809 363.854 63.3809 cv
364.219 63.3809 364.484 63.6055 364.484 63.9692 cv
364.484 67.0093 li
cp
f
372.66 72.8081 mo
372.66 73.1865 372.437 73.4385 372.045 73.4385 cv
371.639 73.4385 371.386 73.2144 371.386 72.8081 cv
371.386 63.9976 li
371.386 63.6191 371.624 63.3809 372.002 63.3809 cv
372.395 63.3809 372.66 63.5913 372.66 63.9976 cv
372.66 72.8081 li
cp
f
378.752 69.6006 mo
378.556 69.6987 378.135 69.7964 377.799 69.8667 cv
377.043 70.0347 li
376.188 70.2168 375.516 70.4268 375.516 71.2813 cv
375.516 72.0659 376.133 72.4438 376.861 72.4438 cv
377.238 72.4438 377.617 72.3179 377.926 72.1079 cv
378.668 71.6035 378.752 70.875 378.752 70.0347 cv
378.752 69.6006 li
cp
379.942 72.8784 mo
379.942 73.2285 379.732 73.4385 379.368 73.4385 cv
378.906 73.4385 378.794 73.1304 378.794 72.7383 cv
378.794 72.458 li
378.304 73.1582 377.393 73.4946 376.553 73.4946 cv
375.18 73.4946 374.186 72.6963 374.186 71.2676 cv
374.186 69.8809 375.054 69.4463 376.314 69.1802 cv
377.505 68.9282 li
378.71 68.6758 378.752 68.6338 378.752 68.1855 cv
378.752 67.3032 378.094 66.9951 377.295 66.9951 cv
376.482 66.9951 376.034 67.2051 375.754 67.9756 cv
375.628 68.3115 375.529 68.4238 375.152 68.4238 cv
374.787 68.4238 374.494 68.2695 374.494 67.8774 cv
374.494 67.6675 374.619 67.3594 374.718 67.1772 cv
375.236 66.2524 376.272 65.9585 377.268 65.9585 cv
379.102 65.9585 379.942 66.6587 379.942 68.438 cv
379.942 72.8784 li
cp
f
384.98 65.9585 mo
386.031 65.9585 386.872 66.2246 387.517 67.0791 cv
387.685 67.3032 387.923 67.7095 387.923 67.9756 cv
387.923 68.3677 387.615 68.606 387.236 68.606 cv
386.83 68.606 386.704 68.3257 386.564 68.0176 cv
386.27 67.3311 385.668 67.0229 384.926 67.0229 cv
383.426 67.0229 382.88 68.354 382.88 69.6563 cv
382.88 71.0293 383.342 72.4019 384.939 72.4019 cv
385.877 72.4019 386.48 71.9399 386.788 71.1274 cv
386.956 70.6929 387.11 70.5811 387.391 70.5811 cv
387.727 70.5811 388.063 70.8052 388.063 71.1694 cv
388.063 71.6738 387.517 72.4858 387.139 72.7939 cv
386.521 73.2983 385.709 73.4946 384.926 73.4946 cv
382.643 73.4946 381.535 71.8276 381.535 69.6846 cv
381.535 67.5415 382.684 65.9585 384.98 65.9585 cv
cp
f
394.6 72.4019 mo
394.67 72.5 394.727 72.6543 394.727 72.7803 cv
394.727 73.1582 394.377 73.4385 394.012 73.4385 cv
393.788 73.4385 393.648 73.3267 393.521 73.1445 cv
391.322 69.9229 li
390.454 70.8193 li
390.454 72.8364 li
390.454 73.2002 390.174 73.4385 389.824 73.4385 cv
389.432 73.4385 389.18 73.2285 389.18 72.8364 cv
389.18 64.0112 li
389.18 63.5771 389.459 63.3809 389.824 63.3809 cv
390.188 63.3809 390.454 63.6191 390.454 63.9834 cv
390.454 69.2783 li
390.791 68.8862 391.154 68.522 391.519 68.1436 cv
393.34 66.2104 li
393.451 66.0845 393.564 66.0146 393.732 66.0146 cv
394.055 66.0146 394.334 66.2666 394.334 66.603 cv
394.334 66.7432 394.292 66.8691 394.166 66.9951 cv
392.232 69.0122 li
394.6 72.4019 li
cp
f
403.293 67.0229 mo
401.795 67.0229 401.221 68.3398 401.221 69.6563 cv
401.221 70.959 401.682 72.458 403.237 72.458 cv
404.876 72.458 405.213 71.0435 405.213 69.6846 cv
405.213 68.3818 404.82 67.0229 403.293 67.0229 cv
cp
401.234 67.0093 mo
401.809 66.2524 402.621 65.9585 403.545 65.9585 cv
405.744 65.9585 406.557 67.8213 406.557 69.7407 cv
406.557 71.7017 405.604 73.5088 403.434 73.5088 cv
402.578 73.5088 401.809 73.2144 401.234 72.5703 cv
401.234 72.7803 li
401.234 73.1865 401.023 73.4385 400.617 73.4385 cv
400.226 73.4385 399.973 73.2144 399.973 72.8223 cv
399.973 63.9834 li
399.973 63.6191 400.24 63.3809 400.604 63.3809 cv
400.968 63.3809 401.234 63.6055 401.234 63.9692 cv
401.234 67.0093 li
cp
f
412.295 69.6006 mo
412.1 69.6987 411.679 69.7964 411.343 69.8667 cv
410.586 70.0347 li
409.732 70.2168 409.06 70.4268 409.06 71.2813 cv
409.06 72.0659 409.676 72.4438 410.404 72.4438 cv
410.782 72.4438 411.16 72.3179 411.469 72.1079 cv
412.211 71.6035 412.295 70.875 412.295 70.0347 cv
412.295 69.6006 li
cp
413.486 72.8784 mo
413.486 73.2285 413.275 73.4385 412.912 73.4385 cv
412.449 73.4385 412.338 73.1304 412.338 72.7383 cv
412.338 72.458 li
411.848 73.1582 410.937 73.4946 410.096 73.4946 cv
408.723 73.4946 407.729 72.6963 407.729 71.2676 cv
407.729 69.8809 408.598 69.4463 409.857 69.1802 cv
411.049 68.9282 li
412.254 68.6758 412.295 68.6338 412.295 68.1855 cv
412.295 67.3032 411.637 66.9951 410.838 66.9951 cv
410.025 66.9951 409.578 67.2051 409.297 67.9756 cv
409.172 68.3115 409.074 68.4238 408.695 68.4238 cv
408.331 68.4238 408.037 68.2695 408.037 67.8774 cv
408.037 67.6675 408.163 67.3594 408.262 67.1772 cv
408.779 66.2524 409.816 65.9585 410.811 65.9585 cv
412.646 65.9585 413.486 66.6587 413.486 68.438 cv
413.486 72.8784 li
cp
f
418.524 65.9585 mo
419.575 65.9585 420.416 66.2246 421.061 67.0791 cv
421.229 67.3032 421.467 67.7095 421.467 67.9756 cv
421.467 68.3677 421.158 68.606 420.779 68.606 cv
420.373 68.606 420.248 68.3257 420.107 68.0176 cv
419.813 67.3311 419.211 67.0229 418.469 67.0229 cv
416.97 67.0229 416.424 68.354 416.424 69.6563 cv
416.424 71.0293 416.886 72.4019 418.482 72.4019 cv
419.421 72.4019 420.023 71.9399 420.332 71.1274 cv
420.5 70.6929 420.654 70.5811 420.934 70.5811 cv
421.27 70.5811 421.606 70.8052 421.606 71.1694 cv
421.606 71.6738 421.061 72.4858 420.682 72.7939 cv
420.065 73.2983 419.253 73.4946 418.469 73.4946 cv
416.186 73.4946 415.078 71.8276 415.078 69.6846 cv
415.078 67.5415 416.228 65.9585 418.524 65.9585 cv
cp
f
428.145 72.4019 mo
428.214 72.5 428.27 72.6543 428.27 72.7803 cv
428.27 73.1582 427.92 73.4385 427.556 73.4385 cv
427.332 73.4385 427.191 73.3267 427.065 73.1445 cv
424.866 69.9229 li
423.998 70.8193 li
423.998 72.8364 li
423.998 73.2002 423.717 73.4385 423.367 73.4385 cv
422.975 73.4385 422.723 73.2285 422.723 72.8364 cv
422.723 64.0112 li
422.723 63.5771 423.003 63.3809 423.367 63.3809 cv
423.731 63.3809 423.998 63.6191 423.998 63.9834 cv
423.998 69.2783 li
424.334 68.8862 424.697 68.522 425.063 68.1436 cv
426.883 66.2104 li
426.995 66.0845 427.107 66.0146 427.275 66.0146 cv
427.598 66.0146 427.877 66.2666 427.877 66.603 cv
427.877 66.7432 427.836 66.8691 427.709 66.9951 cv
425.776 69.0122 li
428.145 72.4019 li
cp
f
432.398 67.0649 mo
430.941 67.0649 430.396 68.2417 430.396 69.5444 cv
430.396 70.7632 430.83 71.9819 432.272 71.9819 cv
432.875 71.9819 433.449 71.6875 433.799 71.1973 cv
434.107 70.7632 434.191 69.9785 434.191 69.4746 cv
434.191 68.2837 433.799 67.0649 432.398 67.0649 cv
cp
435.368 72.4019 mo
435.368 73.4526 435.34 74.5591 434.556 75.2314 cv
434.037 75.6938 433.141 75.876 432.342 75.876 cv
431.376 75.876 430.354 75.6377 429.779 74.8394 cv
429.611 74.6152 429.457 74.2651 429.457 73.9849 cv
429.457 73.6206 429.793 73.3965 430.129 73.3965 cv
430.451 73.3965 430.703 73.6064 430.816 73.915 cv
431.039 74.5313 431.502 74.7974 432.412 74.7974 cv
434.08 74.7974 434.178 73.7046 434.178 72.4019 cv
434.178 72.1221 li
433.59 72.8364 432.959 73.1025 432.034 73.1025 cv
430.004 73.1025 429.078 71.4917 429.078 69.6426 cv
429.078 67.6396 430.059 65.9585 432.23 65.9585 cv
433.015 65.9585 433.813 66.1685 434.233 66.9111 cv
434.233 66.687 li
434.233 66.3369 434.359 66.0146 434.822 66.0146 cv
435.158 66.0146 435.368 66.1968 435.368 66.5469 cv
435.368 72.4019 li
cp
f
437.297 66.603 mo
437.297 66.2104 437.535 66.0146 437.941 66.0146 cv
438.389 66.0146 438.516 66.3369 438.516 66.687 cv
438.516 67.3311 li
438.823 66.4907 439.594 66.0146 440.434 66.0146 cv
440.84 66.0146 441.176 66.1826 441.176 66.645 cv
441.176 67.1353 440.855 67.2051 440.406 67.2754 cv
438.894 67.5132 438.571 68.6338 438.571 69.8525 cv
438.571 72.8501 li
438.571 73.2705 438.333 73.4385 437.927 73.4385 cv
437.563 73.4385 437.297 73.2847 437.297 72.8501 cv
437.297 66.603 li
cp
f
445.068 67.0229 mo
443.473 67.0229 442.939 68.3257 442.939 69.7266 cv
442.939 71.1831 443.43 72.458 445.111 72.458 cv
446.75 72.458 447.24 71.0713 447.24 69.6704 cv
447.24 68.2275 446.623 67.0229 445.068 67.0229 cv
cp
445.027 73.4946 mo
442.141 73.4946 441.623 71.2114 441.623 69.6987 cv
441.623 67.4854 442.785 65.9585 445.125 65.9585 cv
447.408 65.9585 448.557 67.4712 448.557 69.6563 cv
448.557 70.959 448.178 73.4946 445.027 73.4946 cv
cp
f
456.074 72.8223 mo
456.074 73.2144 455.836 73.4385 455.443 73.4385 cv
454.898 73.4385 454.828 73.0742 454.828 72.6401 cv
454.828 72.4302 li
454.238 73.2422 453.58 73.4946 452.586 73.4946 cv
450.766 73.4946 450.135 72.3037 450.135 70.7632 cv
450.135 66.645 li
450.135 66.2104 450.416 66.0146 450.766 66.0146 cv
451.172 66.0146 451.438 66.2388 451.438 66.645 cv
451.438 70.189 li
451.438 71.3794 451.494 72.3882 452.797 72.3882 cv
454.086 72.3882 454.771 71.4492 454.771 70.2026 cv
454.771 66.645 li
454.771 66.2104 455.051 66.0146 455.402 66.0146 cv
455.809 66.0146 456.074 66.2246 456.074 66.645 cv
456.074 72.8223 li
cp
f
463.941 72.8081 mo
463.941 73.2144 463.717 73.4385 463.283 73.4385 cv
462.904 73.4385 462.652 73.2002 462.652 72.8223 cv
462.652 69.0542 li
462.652 68.1016 462.596 67.0649 461.266 67.0649 cv
459.781 67.0649 459.291 68.2275 459.291 69.3765 cv
459.291 72.8081 li
459.291 73.2285 459.053 73.4385 458.633 73.4385 cv
458.268 73.4385 458.002 73.2144 458.002 72.8364 cv
458.002 66.6167 li
458.002 66.2246 458.297 66.0146 458.619 66.0146 cv
459.039 66.0146 459.264 66.2388 459.264 66.687 cv
459.264 67.0093 li
459.795 66.2524 460.58 65.9585 461.504 65.9585 cv
463.578 65.9585 463.941 67.3872 463.941 68.6479 cv
463.941 72.8081 li
cp
f
468.783 67.0513 mo
467.215 67.0513 466.852 68.4937 466.852 69.7964 cv
466.852 71.1694 467.271 72.4302 468.84 72.4302 cv
470.324 72.4302 470.871 71.1133 470.871 69.8384 cv
470.871 68.4517 470.451 67.0513 468.783 67.0513 cv
cp
472.104 72.8364 mo
472.104 73.2285 471.865 73.4385 471.473 73.4385 cv
471.039 73.4385 470.871 73.1582 470.871 72.7939 cv
470.871 72.4858 li
470.354 73.1724 469.498 73.4946 468.658 73.4946 cv
466.402 73.4946 465.52 71.6455 465.52 69.6426 cv
465.52 67.7656 466.43 65.9585 468.531 65.9585 cv
469.457 65.9585 470.311 66.2666 470.857 67.0371 cv
470.857 64.0254 li
470.857 63.6191 471.096 63.3809 471.473 63.3809 cv
471.852 63.3809 472.104 63.6055 472.104 63.9834 cv
472.104 72.8364 li
cp
f
198.109 38.5723 mo
199.297 38.5723 li
199.904 38.5723 200.564 38.6914 200.564 39.457 cv
200.564 40.3691 199.84 40.4063 199.047 40.4063 cv
198.109 40.4063 li
198.109 38.5723 li
cp
197.213 43.6152 mo
198.109 43.6152 li
198.109 41.1328 li
199.061 41.1328 li
200.631 43.6152 li
201.596 43.6152 li
199.945 41.0664 li
200.803 40.9746 201.463 40.5391 201.463 39.4961 cv
201.463 38.3867 200.816 37.8457 199.443 37.8457 cv
197.213 37.8457 li
197.213 43.6152 li
cp
195.162 40.8359 mo
195.162 38.4746 196.93 36.6523 199.24 36.6523 cv
201.525 36.6523 203.293 38.4746 203.293 40.8359 cv
203.293 43.252 201.525 45.0742 199.24 45.0742 cv
196.93 45.0742 195.162 43.252 195.162 40.8359 cv
cp
194.264 40.8359 mo
194.264 43.6738 196.533 45.7988 199.24 45.7988 cv
201.934 45.7988 204.189 43.6738 204.189 40.8359 cv
204.189 38.0508 201.934 35.9258 199.24 35.9258 cv
196.533 35.9258 194.264 38.0508 194.264 40.8359 cv
cp
ef
60.4355 20.2109 mo
60.4355 23.0391 58.1426 25.334 55.3125 25.334 cv
52.4844 25.334 50.1914 23.0391 50.1914 20.2109 cv
50.1914 17.3828 52.4844 15.0879 55.3125 15.0879 cv
58.1426 15.0879 60.4355 17.3828 60.4355 20.2109 cv
cp
f
183.707 32.9785 mo
183.881 32.709 184.047 32.4082 184.195 32.0801 cv
185 30.5078 186.658 29.4551 188.545 29.4551 cv
191.229 29.4551 193.406 31.6328 193.406 34.3164 cv
193.406 35.002 193.264 35.6406 193.01 36.2285 cv
192.873 36.5195 li
190.189 42.041 184.506 45.7988 178.068 45.7988 cv
169.127 45.7988 161.879 38.5508 161.879 29.6094 cv
161.879 20.666 169.127 13.418 178.068 13.418 cv
178.777 13.418 li
181.439 13.5313 183.953 14.2871 186.158 15.5391 cv
186.158 0 li
195.779 0 li
195.779 21.9023 li
195.779 24.4434 193.537 27.1543 190.602 27.1543 cv
187.285 27.1543 184.768 26.0859 182.818 24.4297 cv
181.705 23.5605 180.301 23.041 178.777 23.041 cv
178.068 23.041 li
174.439 23.041 171.5 25.9824 171.5 29.6094 cv
171.5 33.2363 174.439 36.1777 178.068 36.1777 cv
180.459 36.1777 182.557 34.8926 183.707 32.9785 cv
cp
f
149.697 29.6094 mo
149.697 25.9824 146.756 23.041 143.129 23.041 cv
139.502 23.041 136.561 25.9824 136.561 29.6094 cv
136.561 33.2363 139.502 36.1777 143.129 36.1777 cv
146.756 36.1777 149.697 33.2363 149.697 29.6094 cv
cp
126.939 29.6094 mo
126.939 20.666 134.188 13.418 143.129 13.418 cv
152.072 13.418 159.32 20.666 159.32 29.6094 cv
159.32 38.5508 152.072 45.7988 143.129 45.7988 cv
134.188 45.7988 126.939 38.5508 126.939 29.6094 cv
cp
f
107.365 23.0195 mo
106.557 23.0195 105.869 23.5488 105.633 24.2813 cv
101.764 37.627 li
100.365 42.3496 96.0234 45.7988 90.8418 45.7988 cv
85.6621 45.7988 81.3184 42.3496 79.9199 37.627 cv
76.0508 24.2813 li
75.8145 23.5488 75.127 23.0195 74.3184 23.0195 cv
73.5098 23.0195 72.8164 23.5488 72.5781 24.2813 cv
68.7109 37.627 li
67.3125 42.3496 62.9355 45.7988 57.7559 45.7988 cv
55.0703 45.7988 li
55.0703 36.1973 li
57.7891 36.1973 li
58.5898 36.1973 59.2637 35.6758 59.502 34.9375 cv
63.3711 21.5898 li
64.7676 16.8691 69.1367 13.4199 74.3184 13.418 cv
79.5 13.4199 83.8633 16.8691 85.2598 21.5898 cv
89.1289 34.9375 li
89.3672 35.6758 90.041 36.1973 90.8418 36.1973 cv
91.6445 36.1973 92.3164 35.6758 92.5547 34.9375 cv
96.4238 21.5898 li
97.8223 16.8691 102.184 13.4199 107.365 13.418 cv
112.547 13.4199 116.916 16.8691 118.314 21.5898 cv
122.184 34.9375 li
122.42 35.6758 123.094 36.1973 123.895 36.1973 cv
126.611 36.1973 li
126.611 45.7988 li
123.93 45.7988 li
118.746 45.7988 114.371 42.3496 112.973 37.627 cv
109.104 24.2813 li
108.869 23.5488 108.174 23.0195 107.365 23.0195 cv
cp
f
54.0645 9.62109 mo
50.4355 9.62109 47.4961 12.5625 47.4961 16.1895 cv
47.4961 45.7988 li
37.873 45.7988 li
37.873 25.3379 li
29.6758 25.3379 li
29.6758 15.7441 li
37.8789 15.7441 li
38.1152 7.00781 45.2715 0 54.0645 0 cv
63.6719 0 li
63.6719 9.62109 li
54.0645 9.62109 li
cp
f
55.8135 67.6953 mo
56.1504 67.6953 56.374 67.9053 56.374 68.2559 cv
56.374 68.6201 56.1777 68.8438 55.8135 68.8438 cv
51.709 68.8438 li
51.709 72.7939 li
51.709 73.1865 51.4004 73.4385 51.0234 73.4385 cv
50.6025 73.4385 50.3652 73.2285 50.3652 72.7939 cv
50.3652 64.123 li
50.3652 63.7178 50.5605 63.4648 51.0234 63.4648 cv
56.2197 63.4648 li
56.584 63.4648 56.8086 63.6748 56.8086 64.0537 cv
56.8086 64.4453 56.6113 64.6699 56.2197 64.6699 cv
51.709 64.6699 li
51.709 67.6953 li
55.8135 67.6953 li
cp
f
60.6426 67.0234 mo
59.0449 67.0234 58.5137 68.3262 58.5137 69.7266 cv
58.5137 71.1836 59.0039 72.458 60.6836 72.458 cv
62.3232 72.458 62.8135 71.0713 62.8135 69.6709 cv
62.8135 68.2275 62.1973 67.0234 60.6426 67.0234 cv
cp
60.5996 73.4941 mo
57.7148 73.4941 57.1963 71.2109 57.1963 69.6982 cv
57.1963 67.4854 58.3594 65.958 60.6982 65.958 cv
62.9814 65.958 64.1309 67.4717 64.1309 69.6563 cv
64.1309 70.959 63.752 73.4941 60.5996 73.4941 cv
cp
f
65.708 66.6025 mo
65.708 66.2109 65.9463 66.0146 66.3525 66.0146 cv
66.8008 66.0146 66.9268 66.3369 66.9268 66.6865 cv
66.9268 67.3311 li
67.2344 66.4912 68.0059 66.0146 68.8457 66.0146 cv
69.252 66.0146 69.5879 66.1826 69.5879 66.6445 cv
69.5879 67.1348 69.2656 67.2051 68.8184 67.2754 cv
67.3047 67.5137 66.9824 68.6338 66.9824 69.8525 cv
66.9824 72.8506 li
66.9824 73.2705 66.7441 73.4385 66.3379 73.4385 cv
65.9746 73.4385 65.708 73.2842 65.708 72.8506 cv
65.708 66.6025 li
cp
f
77.2871 72.9619 mo
77.1895 73.3408 76.8809 73.4385 76.5176 73.4385 cv
76.1953 73.4385 75.9004 73.3682 75.7754 72.9902 cv
73.8281 66.8545 li
73.7998 66.7705 73.7852 66.6865 73.7852 66.5889 cv
73.7852 66.2109 74.1641 66.0146 74.5 66.0146 cv
74.8359 66.0146 75.0176 66.1826 75.1025 66.4912 cv
76.5449 71.4639 li
77.8896 66.4629 li
77.9883 66.0986 78.2676 66.0146 78.5898 66.0146 cv
78.9121 66.0146 79.1924 66.0986 79.291 66.4629 cv
80.6641 71.5615 li
82.1055 66.4629 li
82.2041 66.127 82.4141 66.0146 82.7227 66.0146 cv
83.0449 66.0146 83.4229 66.1963 83.4229 66.5605 cv
83.4229 66.6445 83.4082 66.7432 83.3809 66.8271 cv
81.3779 73.0039 li
81.2656 73.3545 80.957 73.4385 80.6494 73.4385 cv
80.3271 73.4385 80.0195 73.3682 79.9063 72.9902 cv
78.5488 68.2979 li
77.2871 72.9619 li
cp
f
85.6729 72.7803 mo
85.6729 73.1865 85.4199 73.4385 85.0283 73.4385 cv
84.6504 73.4385 84.3838 73.2422 84.3838 72.8086 cv
84.3838 64.0117 li
84.3838 63.5771 84.6641 63.3809 85.0137 63.3809 cv
85.4199 63.3809 85.6865 63.6055 85.6865 64.0117 cv
85.6865 66.9248 li
86.1768 66.2529 87.1016 65.958 87.9141 65.958 cv
89.959 65.958 90.3232 67.3877 90.3232 68.6201 cv
90.3232 72.8086 li
90.3232 73.1729 90.0713 73.4385 89.6934 73.4385 cv
89.2588 73.4385 89.0352 73.2148 89.0352 72.8086 cv
89.0352 68.8584 li
89.0352 67.8779 88.7686 67.1211 87.6484 67.1211 cv
87.2422 67.1211 86.7793 67.2607 86.457 67.499 cv
85.7568 68.0176 85.6729 68.6201 85.6729 69.4326 cv
85.6729 72.7803 li
cp
f
93.5273 72.7939 mo
93.5273 73.2002 93.2607 73.4385 92.9102 73.4385 cv
92.5322 73.4385 92.252 73.2148 92.252 72.8086 cv
92.252 66.6445 li
92.252 66.2246 92.5039 66.0146 92.8691 66.0146 cv
93.2891 66.0146 93.5273 66.2383 93.5273 66.6445 cv
93.5273 72.7939 li
cp
92.8828 64.9502 mo
92.4063 64.9502 92.0977 64.6416 92.0977 64.1797 cv
92.0977 63.6895 92.4336 63.3809 92.8691 63.3809 cv
93.3447 63.3809 93.667 63.7031 93.667 64.1797 cv
93.667 64.6563 93.3594 64.9502 92.8828 64.9502 cv
cp
f
95.5557 67.1914 mo
94.8135 67.1914 li
94.4492 67.1914 94.2813 66.9531 94.2813 66.6309 cv
94.2813 66.3223 94.4629 66.0986 94.8135 66.0986 cv
95.5703 66.0986 li
95.5703 64.46 li
95.5703 64.0391 95.8359 63.8574 96.2002 63.8574 cv
96.6064 63.8574 96.8438 64.0391 96.8438 64.46 cv
96.8438 66.0986 li
97.7129 66.0986 li
98.0488 66.0986 98.2451 66.2803 98.2451 66.6309 cv
98.2451 66.9668 98.0625 67.1914 97.7129 67.1914 cv
96.8438 67.1914 li
96.8438 71.1689 li
96.8438 71.9678 96.9004 72.3037 97.6563 72.3604 cv
98.0488 72.3877 98.3291 72.416 98.3291 72.8926 cv
98.3291 73.3682 97.8945 73.4385 97.5176 73.4385 cv
96.1299 73.4385 95.5557 72.9766 95.5557 71.6035 cv
95.5557 67.1914 li
cp
f
104.532 69.0264 mo
104.463 67.9199 103.832 67.0791 102.641 67.0791 cv
101.367 67.0791 100.75 67.8779 100.526 69.0264 cv
104.532 69.0264 li
cp
100.526 70.0771 mo
100.526 70.4971 100.61 71.1973 101.059 71.7295 cv
101.535 72.29 102.025 72.416 102.67 72.416 cv
103.678 72.416 104.182 71.8838 104.42 71.4492 cv
104.631 71.0713 104.729 70.9316 105.022 70.9316 cv
105.373 70.9316 105.751 71.1416 105.751 71.5332 cv
105.751 71.7432 105.527 72.1221 105.359 72.332 cv
104.672 73.1582 103.72 73.4941 102.67 73.4941 cv
101.689 73.4941 100.82 73.2842 100.12 72.5137 cv
99.2656 71.5752 99.1953 70.2451 99.1953 69.8525 cv
99.1953 67.7373 100.344 65.958 102.627 65.958 cv
105.162 65.958 105.85 68.0313 105.85 69.4463 cv
105.85 69.8525 105.611 70.0771 105.219 70.0771 cv
100.526 70.0771 li
cp
f
114.821 67.0234 mo
113.322 67.0234 112.748 68.3398 112.748 69.6563 cv
112.748 70.959 113.211 72.458 114.766 72.458 cv
116.404 72.458 116.74 71.043 116.74 69.6846 cv
116.74 68.3818 116.348 67.0234 114.821 67.0234 cv
cp
112.762 67.0088 mo
113.336 66.2529 114.148 65.958 115.074 65.958 cv
117.273 65.958 118.086 67.8213 118.086 69.7402 cv
118.086 71.7012 117.133 73.5088 114.961 73.5088 cv
114.107 73.5088 113.336 73.2148 112.762 72.5703 cv
112.762 72.7803 li
112.762 73.1865 112.553 73.4385 112.146 73.4385 cv
111.754 73.4385 111.502 73.2148 111.502 72.8223 cv
111.502 63.9834 li
111.502 63.6191 111.768 63.3809 112.132 63.3809 cv
112.496 63.3809 112.762 63.6055 112.762 63.9697 cv
112.762 67.0088 li
cp
f
123.824 69.6006 mo
123.627 69.6982 123.207 69.7969 122.871 69.8662 cv
122.115 70.0352 li
121.26 70.2168 120.588 70.4268 120.588 71.2813 cv
120.588 72.0654 121.204 72.4443 121.933 72.4443 cv
122.311 72.4443 122.689 72.3184 122.997 72.1074 cv
123.74 71.6035 123.824 70.875 123.824 70.0352 cv
123.824 69.6006 li
cp
125.014 72.8779 mo
125.014 73.2285 124.805 73.4385 124.439 73.4385 cv
123.978 73.4385 123.865 73.1299 123.865 72.7383 cv
123.865 72.458 li
123.375 73.1582 122.465 73.4941 121.625 73.4941 cv
120.252 73.4941 119.258 72.6963 119.258 71.2676 cv
119.258 69.8809 120.125 69.4463 121.387 69.1807 cv
122.576 68.9277 li
123.781 68.6758 123.824 68.6338 123.824 68.1855 cv
123.824 67.3037 123.165 66.9951 122.367 66.9951 cv
121.555 66.9951 121.105 67.2051 120.826 67.9756 cv
120.699 68.3115 120.602 68.4238 120.224 68.4238 cv
119.859 68.4238 119.565 68.2695 119.565 67.8779 cv
119.565 67.667 119.691 67.3594 119.789 67.1768 cv
120.308 66.2529 121.344 65.958 122.339 65.958 cv
124.174 65.958 125.014 66.6592 125.014 68.4375 cv
125.014 72.8779 li
cp
f
130.053 65.958 mo
131.104 65.958 131.943 66.2246 132.588 67.0791 cv
132.756 67.3037 132.994 67.709 132.994 67.9756 cv
132.994 68.3682 132.687 68.6055 132.309 68.6055 cv
131.902 68.6055 131.775 68.3262 131.636 68.0176 cv
131.342 67.3311 130.739 67.0234 129.997 67.0234 cv
128.498 67.0234 127.951 68.3535 127.951 69.6563 cv
127.951 71.0293 128.414 72.4023 130.011 72.4023 cv
130.949 72.4023 131.552 71.9395 131.859 71.127 cv
132.027 70.6934 132.182 70.5811 132.463 70.5811 cv
132.799 70.5811 133.135 70.8047 133.135 71.1689 cv
133.135 71.6738 132.588 72.4863 132.21 72.7939 cv
131.594 73.2988 130.781 73.4941 129.997 73.4941 cv
127.714 73.4941 126.607 71.8281 126.607 69.6846 cv
126.607 67.541 127.756 65.958 130.053 65.958 cv
cp
f
139.672 72.4023 mo
139.742 72.5 139.799 72.6543 139.799 72.7803 cv
139.799 73.1582 139.447 73.4385 139.084 73.4385 cv
138.859 73.4385 138.719 73.3262 138.594 73.1445 cv
136.395 69.9229 li
135.525 70.8193 li
135.525 72.8359 li
135.525 73.2002 135.246 73.4385 134.896 73.4385 cv
134.504 73.4385 134.252 73.2285 134.252 72.8359 cv
134.252 64.0117 li
134.252 63.5771 134.531 63.3809 134.896 63.3809 cv
135.26 63.3809 135.525 63.6191 135.525 63.9834 cv
135.525 69.2783 li
135.861 68.8857 136.227 68.5215 136.59 68.1436 cv
138.412 66.2109 li
138.523 66.085 138.635 66.0146 138.803 66.0146 cv
139.125 66.0146 139.406 66.2666 139.406 66.6025 cv
139.406 66.7432 139.363 66.8691 139.238 66.9951 cv
137.305 69.0117 li
139.672 72.4023 li
cp
f
143.928 67.0654 mo
142.471 67.0654 141.924 68.2422 141.924 69.5439 cv
141.924 70.7627 142.357 71.9814 143.801 71.9814 cv
144.402 71.9814 144.977 71.6875 145.328 71.1973 cv
145.637 70.7627 145.721 69.9785 145.721 69.4746 cv
145.721 68.2842 145.328 67.0654 143.928 67.0654 cv
cp
146.896 72.4023 mo
146.896 73.4521 146.869 74.5596 146.084 75.2314 cv
145.566 75.6934 144.67 75.876 143.871 75.876 cv
142.904 75.876 141.881 75.6377 141.307 74.8389 cv
141.139 74.6152 140.984 74.2646 140.984 73.9844 cv
140.984 73.6211 141.322 73.3965 141.658 73.3965 cv
141.98 73.3965 142.232 73.6064 142.344 73.915 cv
142.568 74.5313 143.031 74.7969 143.941 74.7969 cv
145.607 74.7969 145.705 73.7051 145.705 72.4023 cv
145.705 72.1221 li
145.117 72.8359 144.486 73.1025 143.563 73.1025 cv
141.531 73.1025 140.607 71.4912 140.607 69.6426 cv
140.607 67.6396 141.588 65.958 143.758 65.958 cv
144.543 65.958 145.342 66.1689 145.762 66.9111 cv
145.762 66.6865 li
145.762 66.3369 145.889 66.0146 146.35 66.0146 cv
146.686 66.0146 146.896 66.1963 146.896 66.5469 cv
146.896 72.4023 li
cp
f
148.826 66.6025 mo
148.826 66.2109 149.064 66.0146 149.471 66.0146 cv
149.918 66.0146 150.045 66.3369 150.045 66.6865 cv
150.045 67.3311 li
150.352 66.4912 151.123 66.0146 151.963 66.0146 cv
152.369 66.0146 152.705 66.1826 152.705 66.6445 cv
152.705 67.1348 152.383 67.2051 151.936 67.2754 cv
150.422 67.5137 150.1 68.6338 150.1 69.8525 cv
150.1 72.8506 li
150.1 73.2705 149.861 73.4385 149.455 73.4385 cv
149.092 73.4385 148.826 73.2842 148.826 72.8506 cv
148.826 66.6025 li
cp
f
156.598 67.0234 mo
155 67.0234 154.467 68.3262 154.467 69.7266 cv
154.467 71.1836 154.957 72.458 156.639 72.458 cv
158.277 72.458 158.768 71.0713 158.768 69.6709 cv
158.768 68.2275 158.152 67.0234 156.598 67.0234 cv
cp
156.555 73.4941 mo
153.67 73.4941 153.15 71.2109 153.15 69.6982 cv
153.15 67.4854 154.314 65.958 156.652 65.958 cv
158.936 65.958 160.084 67.4717 160.084 69.6563 cv
160.084 70.959 159.707 73.4941 156.555 73.4941 cv
cp
f
167.602 72.8223 mo
167.602 73.2148 167.365 73.4385 166.973 73.4385 cv
166.426 73.4385 166.355 73.0742 166.355 72.6396 cv
166.355 72.4297 li
165.768 73.2422 165.109 73.4941 164.115 73.4941 cv
162.293 73.4941 161.664 72.3037 161.664 70.7627 cv
161.664 66.6445 li
161.664 66.2109 161.943 66.0146 162.293 66.0146 cv
162.699 66.0146 162.967 66.2383 162.967 66.6445 cv
162.967 70.1885 li
162.967 71.3799 163.021 72.3877 164.324 72.3877 cv
165.613 72.3877 166.299 71.4492 166.299 70.2031 cv
166.299 66.6445 li
166.299 66.2109 166.58 66.0146 166.93 66.0146 cv
167.336 66.0146 167.602 66.2246 167.602 66.6445 cv
167.602 72.8223 li
cp
f
175.469 72.8086 mo
175.469 73.2148 175.246 73.4385 174.811 73.4385 cv
174.434 73.4385 174.182 73.2002 174.182 72.8223 cv
174.182 69.0537 li
174.182 68.1016 174.125 67.0654 172.795 67.0654 cv
171.309 67.0654 170.818 68.2275 170.818 69.376 cv
170.818 72.8086 li
170.818 73.2285 170.58 73.4385 170.16 73.4385 cv
169.797 73.4385 169.531 73.2148 169.531 72.8359 cv
169.531 66.6172 li
169.531 66.2246 169.824 66.0146 170.146 66.0146 cv
170.566 66.0146 170.791 66.2383 170.791 66.6865 cv
170.791 67.0088 li
171.324 66.2529 172.107 65.958 173.033 65.958 cv
175.105 65.958 175.469 67.3877 175.469 68.6475 cv
175.469 72.8086 li
cp
f
180.313 67.0508 mo
178.744 67.0508 178.379 68.4941 178.379 69.7969 cv
178.379 71.1689 178.799 72.4297 180.369 72.4297 cv
181.854 72.4297 182.398 71.1133 182.398 69.8389 cv
182.398 68.4521 181.979 67.0508 180.313 67.0508 cv
cp
183.633 72.8359 mo
183.633 73.2285 183.395 73.4385 183.002 73.4385 cv
182.568 73.4385 182.398 73.1582 182.398 72.7939 cv
182.398 72.4863 li
181.881 73.1729 181.027 73.4941 180.186 73.4941 cv
177.932 73.4941 177.049 71.6455 177.049 69.6426 cv
177.049 67.7656 177.959 65.958 180.061 65.958 cv
180.984 65.958 181.84 66.2666 182.385 67.0371 cv
182.385 64.0254 li
182.385 63.6191 182.623 63.3809 183.002 63.3809 cv
183.379 63.3809 183.633 63.6055 183.633 63.9834 cv
183.633 72.8359 li
cp
f
163.23 407.576 mo
163.566 407.576 163.791 407.787 163.791 408.137 cv
163.791 408.502 163.594 408.725 163.23 408.725 cv
159.126 408.725 li
159.126 412.676 li
159.126 413.068 158.817 413.32 158.439 413.32 cv
158.02 413.32 157.781 413.109 157.781 412.676 cv
157.781 404.004 li
157.781 403.6 157.977 403.346 158.439 403.346 cv
163.637 403.346 li
164 403.346 164.225 403.557 164.225 403.936 cv
164.225 404.326 164.028 404.551 163.637 404.551 cv
159.126 404.551 li
159.126 407.576 li
163.23 407.576 li
cp
f
168.059 406.904 mo
166.462 406.904 165.93 408.207 165.93 409.607 cv
165.93 411.064 166.42 412.34 168.101 412.34 cv
169.74 412.34 170.23 410.953 170.23 409.553 cv
170.23 408.109 169.613 406.904 168.059 406.904 cv
cp
168.017 413.375 mo
165.131 413.375 164.613 411.092 164.613 409.58 cv
164.613 407.367 165.775 405.84 168.115 405.84 cv
170.398 405.84 171.547 407.354 171.547 409.537 cv
171.547 410.84 171.168 413.375 168.017 413.375 cv
cp
f
173.125 406.484 mo
173.125 406.092 173.363 405.896 173.77 405.896 cv
174.217 405.896 174.344 406.219 174.344 406.568 cv
174.344 407.213 li
174.651 406.373 175.422 405.896 176.262 405.896 cv
176.668 405.896 177.005 406.064 177.005 406.525 cv
177.005 407.016 176.683 407.086 176.234 407.156 cv
174.722 407.395 174.399 408.516 174.399 409.734 cv
174.399 412.732 li
174.399 413.152 174.161 413.32 173.755 413.32 cv
173.391 413.32 173.125 413.166 173.125 412.732 cv
173.125 406.484 li
cp
f
185.264 405.84 mo
186.314 405.84 187.155 406.105 187.8 406.961 cv
187.968 407.186 188.206 407.59 188.206 407.857 cv
188.206 408.25 187.898 408.486 187.52 408.486 cv
187.113 408.486 186.987 408.207 186.848 407.898 cv
186.553 407.213 185.951 406.904 185.209 406.904 cv
183.709 406.904 183.163 408.234 183.163 409.537 cv
183.163 410.91 183.625 412.283 185.223 412.283 cv
186.16 412.283 186.764 411.82 187.071 411.008 cv
187.239 410.574 187.394 410.463 187.674 410.463 cv
188.01 410.463 188.346 410.686 188.346 411.051 cv
188.346 411.555 187.8 412.367 187.422 412.676 cv
186.805 413.18 185.992 413.375 185.209 413.375 cv
182.926 413.375 181.818 411.709 181.818 409.566 cv
181.818 407.422 182.967 405.84 185.264 405.84 cv
cp
f
192.559 406.904 mo
190.961 406.904 190.43 408.207 190.43 409.607 cv
190.43 411.064 190.92 412.34 192.6 412.34 cv
194.239 412.34 194.729 410.953 194.729 409.553 cv
194.729 408.109 194.113 406.904 192.559 406.904 cv
cp
192.516 413.375 mo
189.631 413.375 189.112 411.092 189.112 409.58 cv
189.112 407.367 190.275 405.84 192.614 405.84 cv
194.897 405.84 196.047 407.354 196.047 409.537 cv
196.047 410.84 195.668 413.375 192.516 413.375 cv
cp
f
198.899 412.689 mo
198.899 413.068 198.676 413.32 198.283 413.32 cv
197.877 413.32 197.625 413.096 197.625 412.689 cv
197.625 403.879 li
197.625 403.5 197.863 403.262 198.241 403.262 cv
198.633 403.262 198.899 403.473 198.899 403.879 cv
198.899 412.689 li
cp
f
203.926 406.904 mo
202.329 406.904 201.797 408.207 201.797 409.607 cv
201.797 411.064 202.287 412.34 203.968 412.34 cv
205.607 412.34 206.098 410.953 206.098 409.553 cv
206.098 408.109 205.48 406.904 203.926 406.904 cv
cp
203.884 413.375 mo
200.998 413.375 200.48 411.092 200.48 409.58 cv
200.48 407.367 201.643 405.84 203.982 405.84 cv
206.266 405.84 207.414 407.354 207.414 409.537 cv
207.414 410.84 207.035 413.375 203.884 413.375 cv
cp
f
208.992 406.484 mo
208.992 406.092 209.23 405.896 209.637 405.896 cv
210.085 405.896 210.211 406.219 210.211 406.568 cv
210.211 407.213 li
210.52 406.373 211.289 405.896 212.13 405.896 cv
212.536 405.896 212.873 406.064 212.873 406.525 cv
212.873 407.016 212.551 407.086 212.102 407.156 cv
210.59 407.395 210.268 408.516 210.268 409.734 cv
210.268 412.732 li
210.268 413.152 210.029 413.32 209.623 413.32 cv
209.259 413.32 208.992 413.166 208.992 412.732 cv
208.992 406.484 li
cp
f
221.131 406.904 mo
219.535 406.904 219.002 408.207 219.002 409.607 cv
219.002 411.064 219.492 412.34 221.174 412.34 cv
222.813 412.34 223.303 410.953 223.303 409.553 cv
223.303 408.109 222.687 406.904 221.131 406.904 cv
cp
221.09 413.375 mo
218.204 413.375 217.686 411.092 217.686 409.58 cv
217.686 407.367 218.848 405.84 221.188 405.84 cv
223.471 405.84 224.619 407.354 224.619 409.537 cv
224.619 410.84 224.241 413.375 221.09 413.375 cv
cp
f
226.197 406.484 mo
226.197 406.092 226.436 405.896 226.842 405.896 cv
227.291 405.896 227.416 406.219 227.416 406.568 cv
227.416 407.213 li
227.725 406.373 228.495 405.896 229.336 405.896 cv
229.742 405.896 230.078 406.064 230.078 406.525 cv
230.078 407.016 229.756 407.086 229.308 407.156 cv
227.795 407.395 227.473 408.516 227.473 409.734 cv
227.473 412.732 li
227.473 413.152 227.234 413.32 226.828 413.32 cv
226.464 413.32 226.197 413.166 226.197 412.732 cv
226.197 406.484 li
cp
f
238.211 406.947 mo
236.754 406.947 236.208 408.123 236.208 409.426 cv
236.208 410.645 236.643 411.863 238.085 411.863 cv
238.688 411.863 239.262 411.568 239.611 411.078 cv
239.92 410.645 240.004 409.859 240.004 409.355 cv
240.004 408.166 239.611 406.947 238.211 406.947 cv
cp
241.181 412.283 mo
241.181 413.334 241.152 414.441 240.368 415.113 cv
239.85 415.574 238.953 415.758 238.154 415.758 cv
237.188 415.758 236.166 415.52 235.592 414.721 cv
235.424 414.496 235.27 414.146 235.27 413.865 cv
235.27 413.502 235.605 413.277 235.941 413.277 cv
236.264 413.277 236.516 413.488 236.628 413.797 cv
236.853 414.412 237.314 414.678 238.225 414.678 cv
239.893 414.678 239.99 413.586 239.99 412.283 cv
239.99 412.004 li
239.402 412.717 238.771 412.984 237.847 412.984 cv
235.816 412.984 234.891 411.373 234.891 409.523 cv
234.891 407.521 235.871 405.84 238.043 405.84 cv
238.827 405.84 239.626 406.051 240.046 406.793 cv
240.046 406.568 li
240.046 406.219 240.172 405.896 240.635 405.896 cv
240.971 405.896 241.181 406.078 241.181 406.428 cv
241.181 412.283 li
cp
f
243.109 406.484 mo
243.109 406.092 243.348 405.896 243.754 405.896 cv
244.202 405.896 244.328 406.219 244.328 406.568 cv
244.328 407.213 li
244.637 406.373 245.406 405.896 246.247 405.896 cv
246.653 405.896 246.99 406.064 246.99 406.525 cv
246.99 407.016 246.668 407.086 246.219 407.156 cv
244.707 407.395 244.385 408.516 244.385 409.734 cv
244.385 412.732 li
244.385 413.152 244.146 413.32 243.74 413.32 cv
243.376 413.32 243.109 413.166 243.109 412.732 cv
243.109 406.484 li
cp
f
252.1 409.482 mo
251.904 409.58 251.483 409.678 251.147 409.748 cv
250.391 409.916 li
249.537 410.098 248.864 410.309 248.864 411.162 cv
248.864 411.947 249.48 412.326 250.209 412.326 cv
250.587 412.326 250.965 412.199 251.273 411.988 cv
252.016 411.484 252.1 410.756 252.1 409.916 cv
252.1 409.482 li
cp
253.291 412.76 mo
253.291 413.109 253.08 413.32 252.717 413.32 cv
252.254 413.32 252.143 413.012 252.143 412.619 cv
252.143 412.34 li
251.652 413.039 250.741 413.375 249.9 413.375 cv
248.527 413.375 247.533 412.578 247.533 411.148 cv
247.533 409.762 248.402 409.328 249.662 409.063 cv
250.854 408.809 li
252.059 408.557 252.1 408.516 252.1 408.066 cv
252.1 407.186 251.441 406.877 250.643 406.877 cv
249.83 406.877 249.383 407.086 249.103 407.857 cv
248.977 408.193 248.878 408.305 248.5 408.305 cv
248.136 408.305 247.842 408.15 247.842 407.76 cv
247.842 407.549 247.968 407.24 248.066 407.059 cv
248.584 406.135 249.621 405.84 250.615 405.84 cv
252.45 405.84 253.291 406.541 253.291 408.318 cv
253.291 412.76 li
cp
f
258.539 406.904 mo
257.041 406.904 256.508 408.18 256.508 409.496 cv
256.508 410.813 256.971 412.34 258.539 412.34 cv
260.234 412.34 260.486 410.672 260.486 409.51 cv
260.486 408.234 260.08 406.904 258.539 406.904 cv
cp
255.233 406.525 mo
255.233 406.105 255.5 405.896 255.863 405.896 cv
256.368 405.896 256.536 406.176 256.536 406.639 cv
256.536 406.807 li
257.082 406.162 257.839 405.84 258.68 405.84 cv
260.809 405.84 261.817 407.633 261.817 409.553 cv
261.817 411.43 261.005 413.375 258.848 413.375 cv
257.825 413.375 257.223 413.025 256.536 412.381 cv
256.536 415.322 li
256.536 415.758 256.256 415.953 255.863 415.953 cv
255.514 415.953 255.233 415.729 255.233 415.322 cv
255.233 406.525 li
cp
f
264.684 412.662 mo
264.684 413.068 264.432 413.32 264.039 413.32 cv
263.661 413.32 263.395 413.123 263.395 412.689 cv
263.395 403.893 li
263.395 403.459 263.676 403.262 264.025 403.262 cv
264.432 403.262 264.697 403.486 264.697 403.893 cv
264.697 406.807 li
265.188 406.135 266.113 405.84 266.926 405.84 cv
268.971 405.84 269.334 407.27 269.334 408.502 cv
269.334 412.689 li
269.334 413.055 269.082 413.32 268.704 413.32 cv
268.27 413.32 268.046 413.096 268.046 412.689 cv
268.046 408.74 li
268.046 407.76 267.779 407.002 266.659 407.002 cv
266.253 407.002 265.791 407.143 265.469 407.381 cv
264.768 407.898 264.684 408.502 264.684 409.314 cv
264.684 412.662 li
cp
f
272.538 412.676 mo
272.538 413.082 272.271 413.32 271.922 413.32 cv
271.543 413.32 271.264 413.096 271.264 412.689 cv
271.264 406.525 li
271.264 406.105 271.516 405.896 271.88 405.896 cv
272.3 405.896 272.538 406.119 272.538 406.525 cv
272.538 412.676 li
cp
271.894 404.832 mo
271.418 404.832 271.109 404.523 271.109 404.061 cv
271.109 403.57 271.445 403.262 271.88 403.262 cv
272.355 403.262 272.678 403.584 272.678 404.061 cv
272.678 404.537 272.37 404.832 271.894 404.832 cv
cp
f
277.564 405.84 mo
278.615 405.84 279.456 406.105 280.101 406.961 cv
280.269 407.186 280.507 407.59 280.507 407.857 cv
280.507 408.25 280.199 408.486 279.82 408.486 cv
279.414 408.486 279.288 408.207 279.148 407.898 cv
278.854 407.213 278.252 406.904 277.51 406.904 cv
276.01 406.904 275.464 408.234 275.464 409.537 cv
275.464 410.91 275.926 412.283 277.523 412.283 cv
278.461 412.283 279.064 411.82 279.372 411.008 cv
279.54 410.574 279.694 410.463 279.975 410.463 cv
280.311 410.463 280.646 410.686 280.646 411.051 cv
280.646 411.555 280.101 412.367 279.723 412.676 cv
279.105 413.18 278.293 413.375 277.51 413.375 cv
275.227 413.375 274.119 411.709 274.119 409.566 cv
274.119 407.422 275.268 405.84 277.564 405.84 cv
cp
f
289.171 406.904 mo
287.672 406.904 287.098 408.221 287.098 409.537 cv
287.098 410.84 287.561 412.34 289.115 412.34 cv
290.754 412.34 291.09 410.924 291.09 409.566 cv
291.09 408.264 290.697 406.904 289.171 406.904 cv
cp
287.111 406.891 mo
287.687 406.135 288.498 405.84 289.424 405.84 cv
291.623 405.84 292.436 407.703 292.436 409.621 cv
292.436 411.582 291.482 413.391 289.311 413.391 cv
288.457 413.391 287.687 413.096 287.111 412.451 cv
287.111 412.662 li
287.111 413.068 286.902 413.32 286.496 413.32 cv
286.104 413.32 285.852 413.096 285.852 412.703 cv
285.852 403.865 li
285.852 403.5 286.117 403.262 286.481 403.262 cv
286.846 403.262 287.111 403.486 287.111 403.852 cv
287.111 406.891 li
cp
f
298.173 409.482 mo
297.978 409.58 297.557 409.678 297.221 409.748 cv
296.464 409.916 li
295.609 410.098 294.938 410.309 294.938 411.162 cv
294.938 411.947 295.554 412.326 296.282 412.326 cv
296.66 412.326 297.038 412.199 297.347 411.988 cv
298.089 411.484 298.173 410.756 298.173 409.916 cv
298.173 409.482 li
cp
299.364 412.76 mo
299.364 413.109 299.153 413.32 298.789 413.32 cv
298.327 413.32 298.215 413.012 298.215 412.619 cv
298.215 412.34 li
297.725 413.039 296.814 413.375 295.974 413.375 cv
294.602 413.375 293.606 412.578 293.606 411.148 cv
293.606 409.762 294.476 409.328 295.735 409.063 cv
296.927 408.809 li
298.131 408.557 298.173 408.516 298.173 408.066 cv
298.173 407.186 297.515 406.877 296.717 406.877 cv
295.904 406.877 295.456 407.086 295.176 407.857 cv
295.05 408.193 294.951 408.305 294.573 408.305 cv
294.209 408.305 293.915 408.15 293.915 407.76 cv
293.915 407.549 294.041 407.24 294.139 407.059 cv
294.657 406.135 295.693 405.84 296.688 405.84 cv
298.523 405.84 299.364 406.541 299.364 408.318 cv
299.364 412.76 li
cp
f
304.403 405.84 mo
305.453 405.84 306.294 406.105 306.938 406.961 cv
307.106 407.186 307.345 407.59 307.345 407.857 cv
307.345 408.25 307.036 408.486 306.658 408.486 cv
306.252 408.486 306.126 408.207 305.986 407.898 cv
305.691 407.213 305.09 406.904 304.347 406.904 cv
302.849 406.904 302.302 408.234 302.302 409.537 cv
302.302 410.91 302.764 412.283 304.361 412.283 cv
305.3 412.283 305.901 411.82 306.21 411.008 cv
306.378 410.574 306.532 410.463 306.813 410.463 cv
307.148 410.463 307.484 410.686 307.484 411.051 cv
307.484 411.555 306.938 412.367 306.561 412.676 cv
305.944 413.18 305.132 413.375 304.347 413.375 cv
302.063 413.375 300.957 411.709 300.957 409.566 cv
300.957 407.422 302.105 405.84 304.403 405.84 cv
cp
f
314.022 412.283 mo
314.092 412.381 314.148 412.535 314.148 412.662 cv
314.148 413.039 313.798 413.32 313.434 413.32 cv
313.21 413.32 313.069 413.207 312.943 413.025 cv
310.744 409.805 li
309.876 410.701 li
309.876 412.717 li
309.876 413.082 309.596 413.32 309.246 413.32 cv
308.854 413.32 308.602 413.109 308.602 412.717 cv
308.602 403.893 li
308.602 403.459 308.882 403.262 309.246 403.262 cv
309.609 403.262 309.876 403.5 309.876 403.865 cv
309.876 409.16 li
310.212 408.768 310.576 408.402 310.94 408.025 cv
312.762 406.092 li
312.874 405.967 312.985 405.896 313.153 405.896 cv
313.476 405.896 313.756 406.148 313.756 406.484 cv
313.756 406.625 313.714 406.75 313.588 406.877 cv
311.655 408.893 li
314.022 412.283 li
cp
f
318.276 406.947 mo
316.819 406.947 316.272 408.123 316.272 409.426 cv
316.272 410.645 316.707 411.863 318.149 411.863 cv
318.752 411.863 319.326 411.568 319.677 411.078 cv
319.985 410.645 320.069 409.859 320.069 409.355 cv
320.069 408.166 319.677 406.947 318.276 406.947 cv
cp
321.245 412.283 mo
321.245 413.334 321.218 414.441 320.434 415.113 cv
319.915 415.574 319.019 415.758 318.22 415.758 cv
317.253 415.758 316.23 415.52 315.656 414.721 cv
315.488 414.496 315.334 414.146 315.334 413.865 cv
315.334 413.502 315.671 413.277 316.007 413.277 cv
316.329 413.277 316.581 413.488 316.693 413.797 cv
316.917 414.412 317.38 414.678 318.29 414.678 cv
319.957 414.678 320.055 413.586 320.055 412.283 cv
320.055 412.004 li
319.467 412.717 318.836 412.984 317.912 412.984 cv
315.881 412.984 314.956 411.373 314.956 409.523 cv
314.956 407.521 315.937 405.84 318.107 405.84 cv
318.893 405.84 319.69 406.051 320.111 406.793 cv
320.111 406.568 li
320.111 406.219 320.237 405.896 320.699 405.896 cv
321.035 405.896 321.245 406.078 321.245 406.428 cv
321.245 412.283 li
cp
f
323.175 406.484 mo
323.175 406.092 323.413 405.896 323.819 405.896 cv
324.268 405.896 324.394 406.219 324.394 406.568 cv
324.394 407.213 li
324.701 406.373 325.472 405.896 326.313 405.896 cv
326.719 405.896 327.055 406.064 327.055 406.525 cv
327.055 407.016 326.732 407.086 326.284 407.156 cv
324.771 407.395 324.449 408.516 324.449 409.734 cv
324.449 412.732 li
324.449 413.152 324.211 413.32 323.805 413.32 cv
323.44 413.32 323.175 413.166 323.175 412.732 cv
323.175 406.484 li
cp
f
330.946 406.904 mo
329.349 406.904 328.816 408.207 328.816 409.607 cv
328.816 411.064 329.307 412.34 330.988 412.34 cv
332.627 412.34 333.117 410.953 333.117 409.553 cv
333.117 408.109 332.501 406.904 330.946 406.904 cv
cp
330.904 413.375 mo
328.019 413.375 327.5 411.092 327.5 409.58 cv
327.5 407.367 328.663 405.84 331.002 405.84 cv
333.285 405.84 334.434 407.354 334.434 409.537 cv
334.434 410.84 334.056 413.375 330.904 413.375 cv
cp
f
341.951 412.703 mo
341.951 413.096 341.714 413.32 341.321 413.32 cv
340.775 413.32 340.705 412.955 340.705 412.521 cv
340.705 412.311 li
340.116 413.123 339.458 413.375 338.464 413.375 cv
336.643 413.375 336.013 412.186 336.013 410.645 cv
336.013 406.525 li
336.013 406.092 336.293 405.896 336.643 405.896 cv
337.049 405.896 337.315 406.119 337.315 406.525 cv
337.315 410.07 li
337.315 411.262 337.371 412.27 338.674 412.27 cv
339.963 412.27 340.649 411.33 340.649 410.084 cv
340.649 406.525 li
340.649 406.092 340.929 405.896 341.279 405.896 cv
341.686 405.896 341.951 406.105 341.951 406.525 cv
341.951 412.703 li
cp
f
349.819 412.689 mo
349.819 413.096 349.596 413.32 349.161 413.32 cv
348.783 413.32 348.531 413.082 348.531 412.703 cv
348.531 408.936 li
348.531 407.982 348.475 406.947 347.145 406.947 cv
345.659 406.947 345.169 408.109 345.169 409.258 cv
345.169 412.689 li
345.169 413.109 344.931 413.32 344.511 413.32 cv
344.146 413.32 343.881 413.096 343.881 412.717 cv
343.881 406.498 li
343.881 406.105 344.175 405.896 344.497 405.896 cv
344.917 405.896 345.142 406.119 345.142 406.568 cv
345.142 406.891 li
345.674 406.135 346.458 405.84 347.383 405.84 cv
349.456 405.84 349.819 407.27 349.819 408.529 cv
349.819 412.689 li
cp
f
354.662 406.932 mo
353.094 406.932 352.729 408.375 352.729 409.678 cv
352.729 411.051 353.149 412.311 354.719 412.311 cv
356.203 412.311 356.749 410.994 356.749 409.721 cv
356.749 408.334 356.329 406.932 354.662 406.932 cv
cp
357.982 412.717 mo
357.982 413.109 357.744 413.32 357.352 413.32 cv
356.918 413.32 356.749 413.039 356.749 412.676 cv
356.749 412.367 li
356.231 413.055 355.377 413.375 354.536 413.375 cv
352.281 413.375 351.398 411.527 351.398 409.523 cv
351.398 407.646 352.309 405.84 354.41 405.84 cv
355.335 405.84 356.189 406.148 356.735 406.918 cv
356.735 403.906 li
356.735 403.5 356.974 403.262 357.352 403.262 cv
357.729 403.262 357.982 403.486 357.982 403.865 cv
357.982 412.717 li
cp
f
362.306 413.375 mo
361.899 413.375 360.904 413.334 360.19 412.732 cv
359.546 412.186 359.42 411.414 359.42 411.219 cv
359.42 410.742 359.896 410.631 360.106 410.631 cv
360.4 410.631 360.526 410.785 360.582 410.939 cv
360.736 411.33 360.904 412.367 362.39 412.367 cv
363.216 412.367 363.832 411.934 363.832 411.275 cv
363.832 410.547 363.188 410.365 362.474 410.154 cv
361.661 409.916 li
360.176 409.482 359.7 408.781 359.7 407.928 cv
359.7 407.563 359.84 405.84 362.249 405.84 cv
364.616 405.84 364.995 407.451 364.995 407.73 cv
364.995 408.15 364.616 408.277 364.406 408.277 cv
364.099 408.277 364.014 408.123 363.804 407.717 cv
363.678 407.479 363.3 406.82 362.193 406.82 cv
361.339 406.82 360.975 407.27 360.975 407.76 cv
360.975 408.402 361.535 408.572 362.179 408.768 cv
363.09 409.047 li
364.896 409.607 365.106 410.42 365.106 411.162 cv
365.106 412.381 364.238 413.375 362.306 413.375 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (fmod) ()%%Title: (Press_Kit_CMYK.eps)%%CreationDate: 20/04/10 7:25 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6H!<<iZS;<+!PSZ7-p,,i$R2m/Jr1c?MJOKBate&<c6)5U^QnHJF>qH"kJ#8`SXF8`-Cq;3.[A_N9"a$)A3')Ma1]^X?ZA$L%\g`e_a'sXiV$*.:>O(*gkCtGuL?3\[0-[VO&!cqr:N.k4_++W+5bI-bmH(9.?;tR$G'?-r:54tc4RUMoBo_"NboXN3\t?UPiT+p$%B%Uo1>i,*AXAS0l]7n@Ce6KLT,!qqhP%nNnrF+l83GN\L#Wmg!klq>pT*$VEMk7oIMfF*Rlu]9.[+i,._<X+-_):_'Xh.\#5G0;J%1bsFN>h1eemNs+Z`Nu'7&'uPm7h7>G,WYLOVT9VCp9@$?bn)*YnHTt(%/^)R#d67Oj_,8i&0rQN-kJcTQ1,JT#`RMnHRdVpi#c4]%o"k(qh-Y9cq>s5C*/!2@*)"9/JL(Jk`\$3fQ?2q0n%-43HnfChqNLH]?R!s81*&5b"6_N!%V+,ma15\H/4+>2`m$;MK]dW;W;#,q%FP'i?nN^"S+,RNGMMTVU_=1C'%g.RP!\]Wl^a7*Y^sJ$%`mYNYLo1BS:\/%DPqBRsot,^oJJ[&=nR=9R(<<c8Di:-ISh4^Us+6pj%)299P^Z(`pjfghIO8B<)&CVGIq!$>)diCcMQ1#*uAe4VSrCa/?`<u@a=g,F;hOY.BLgG'[04Ou_X#0iu&\g(FJt$IuHp;nl/IjS$%RqGkt1]YTO[$q`eM8pGm!O0Kj"Y2&%'gX'0#`K1aK7@9VX2(/_Z[T)BNe_%P0`YHd7CFenqAki:3P[6G_-MoeRf<Nd5I&J[rPbKm%QA>[m.!qf-+c+3>%1q^CSa9m?7Kd=[2Zrt6L']T)oYbsr1O]Fu0;i8DnF+Bi"DYjD!DM*&I`"+E_^2rFc6ga!`V=6.nteF3<nDaa%6Nc.chm@jDm=jHbP7#g;g(Kc9dd0d.[Xb#TZ`[M[#p83"o)I<kSa1`UGYp[A9Cq2Y]#2Wh"'-jbN]Z[Lk%qUM1e=-VF6:L($KOhZ%06kqK)QBsk1'^(6Mf0/gh/R)1^_D:`iJD.3iRQY<.;&"lCcVN=hbPRd"g%]g!aR:qV5XBC#*(24@!jaG$+,R]WaNaJ@c9N]$e2W)%!&+A9TkBk4@D=a::;?[C1B]&n'hmW!9c33BW&5Idk9H7a1aU]7Csd/3]<slp7<`8I%8l/d5OJLr@\KR*Fu#L19?1?8DGIe\k2O"'%CXs2MYm(J'Xlp.J?)0P<ed0:TXP)ij9T?Z4p$oOPl?:rGWQ7f]I[=ataE,Lpl*t&*UatC*2,+\t5naY=,?TOBGX<P$7#&bq3?h65%8:i*YMPNguN0,[5OZY(SBei%faW-]r$PWX()+Dpe6cCI>i`m0G@Ob)`W%=4/nl1/E$\P<iRV(b#c-dTqBRrq-)*1FRkWE-Y#_lk<%:ur*!@p#rtGXc)h9SUYE3@<&d>VWI"@T8;H0sOi>NH$ZoCl3<c'?eC9Z$`Xg&hM.&/BoqdN+H.Pj]R./ZPb[Ek1De#i!>A(.$!F,%0#k/h#/RGS\29Q2Z<WF5Es8/n8Y-"4J`1*$bC_[l$[eDhn6%rqkP9]pJ?;BL[(lr%JJC.q(Bbm5A;%%G'CnK+PpXpiRS)%C-65ac%BeIZ.KlfAH8S?M_F?X!O&/d5jA`sPdM.P<JQf0_e-Cr7hZC+rET.+<-/=E??FI(%gZ>>hJAbiEh9kQ98Cc7X)B+$^D8*6`iSRZ]F%*1Pu/HqqbZF.$8kQcnK3KfkJFo2M=,1\k.Ec#\.o0BCUX9Knrljn&;"WrN6)J?^LV"X$nJqHOR=d'*Se0'!BD=&NR_^&IVQ!<4tZ%r'+6W5Cdd.,UaXN,;V]u6Lek_2sZJ9a<a:D^pn<M^<=`+U?d=PBt[6;QKJ'%o`/#>Vs$NOle-Uj,U:#9<O^-V(3ss]>khSt(ZE)J%D;[qE^-)p1Z?$78rkORfGkcia^YOkGb5M03\3!O`FQX!p=pK9trh^mt9QTVU#QH/#g)Z44$9UGLcWM(6UM(]4;p$p=lelA\n.WJX%^fa`&@j7S8#RWk_*s&=!<-bPCe,]0b<JM`SJpE[J[unS^SGdHJnL-gZ^k2%VBkb[1c2VQ?R4[k,+<)X1<DML;Qf.T5h+s)V$j\[r%dKisB1q&%HnHX[@#'om"5JupE'ePIoIuj+1k_8J*@Y8m>4*h@5&MuRQl]7oNc:M#(jtJRNl3$%$4%hK+1i--7bW1L@T/s-RkfB=+%geh`;r#^+k.%tg"/T%N4+ZSFd(ID;B\[De0T[qCo/&@flgC\_,R$'RUj:E"(HK1D@#IO!PRg74Q0Im_m!*IJo`0=uE$&;N22HmOm%)(Ss#)ch^8UCgl>bl=T'@YWP^^:$KU[9=&ujdM)SRcX*Y4MdeI#p4T,Wa&=\?.5.<DVr2u__Je6K.ND_>K]HZ/kQ/+*OFo.%#@'^%f@4PbpP5;BG:_==,^CcP7=Q)1W:M$jkDd6FZhZ%@Or?S-p[hJcC(?SN>uX"sW.u?L8U@u0MP:(Ce/;'%>mH$#:>1><`sH><R\>4L%^KQ&u5!_6n)_ada]=>kO=Pl>[m6(pYNg(Z'.H.6*rFTitFi*oh8+hA\7$%B0GcIO=s(79\h.n\,Mok2?/'7cN5)dgWaM:/(&#P^m%G5TDD"gmAUW%%a"bgQ==huCOHptn1Ck/2ZFJ%I74Fok)#]$6pk?iN)'h*:pWd4=[(=OW[f3F^NgG@tA!'qo>\a4BnFms\p>mA*6M%`IDg0(buj=@c4;il.(!ehtqR@cBXjuhL7bG16[PhLK]lF=9OoWf0\7Fi1t.hhu!^mIk:;.PNAn%`LDebmHPdXeA&U%U[Fl0!GcB#%FpL1<j00b^+.R;:VDA/Gor?d201To&B+9a_e]7VHHmqEU?]_'f$$+sP-#RG38pBF#cFWW8_Q>k)Cb/&rPVB#nDU'$"8TWI&\'`2;%2sG3/N@3d)KMfg-Et?:KVbWNcG>I"c@8jQEm;=Pf!4.T38ni*OKIgq9$a.)4DtdOY^?El=s+NgZRL[N(Q_AZi7T7ZuDV&UYRI"G4%KWZ=SbJb0AA`"+m"*lV:Np"k<n4NQg[%Q;rchmamFk@%db\K^:e%)l/Q-PN'&]&9;qlB%sn,@+]c?K,CAue/_0E*B;-c`o%GcB+2%pQj'1f3Oq@jl&*)E_[rSBA/D;"HZ6K@5A"HN10?hTr:!<cOK95:F?P'LldC+g?`pGfoj'gVjE<u117.f/%DM%.85>=J$^1ReNkH4%.B"U!g@(B"Fdm+/lsJQ`JaOc<o"S^'>Y^H6_sef9"_<0@df)L8+PhM=RBdO#aon\:$:9D5C+DsK[*i9+CpM=U?d3jjl*PW@$29cA%rS,6h'RGL]_g_]*oRI'63ZGf#b+(6_X#lfF!3?"uU#?XO(Gebbn6b#F!a)\W*&biS'+(E3"Jj)B5OQ,GMqMV`X3,RM(VmVF?mM-G%cqkrb#O./`E]B<*o?a&QTr[Z`jq_?tp12b=G#nFj*PJ$qFK\7f$]QM`.GXkVVWMEL"918G=sKRe2fPdV7+RA$Y+%k4QB_[A:-3-Z%3qpUn,4A#D7+u:\[+@lPZ*q<FLj.j8@b2aZF<XT[W.J]D2E.=jYkTo$[%7Dr4(#*MV1Db%RL#s:D^5glC"Z'N/$YNPZ1Ru1X0;!%%T#BVilY4"dq/kqH#$i<Nc-%NVX'leHdZG,c=^,gY(e-P17*NPSBhnHi_5#>PqPoP7jI9jr"L!Sja,QO2*!7"0Gfgi<TG%(.'rTM`%UlRF47ttELb;CM!f"U]a+t9u<O$%CYatqSciG$0CY37Yi12aL7)qFn6o(=m/0%O&"2H3nSm*DI2Pb%Pqj6!Al@]Y@j\0^qZFqAZ4%a]EuEF\o8%DtOpAk1%,F=D)65*+lV5_c`cu)1rK,+JZ`LWMl[<XBX]\Wb(!h-Sh*`WS1U0*\)Vi2#<ffr_%1a(i*QnTS6r4L^5N<%E7g[M^)bf%bIVQ>hImH$-NX]mB<qkn+AO/(1nB!r6al23Pjsf20iP5F<FK>]ENG"7=>kR7';RklR]NJHe#^m!WJ\s1<c^1.+YKo'%,jTV]2JJt?K?B(9E)9U\,TP=bM@"@gK<!u('7Ho%<*!2iTWY0B%Vfc`D'nK>I9b(0@%q5Z:RbMb2-r[3_s-N'1:E\=ds2)L@N[u!%p1uIEJAakLj;=n3o_hD,In_.DUHl[WhQ1>8M<KP;P2oNC=#2V2ogG"r)WIhSS*O]LBf8SnRVY@;kLQ$TUPNaW[mtr7jJ?%"ZM9`f%#h@.'_(J=t>Kk/dO@2o.;N&%,].L8_RL:g'hL)`OS*HL#r>2l]%RTR2W$X<+#Bc+Sdi[<m:8D1I2&Xr,bSEb`#j,S-.<JSfnVj<<%U5bG4SM)*E47:ZAGA[U+kA6,_L@8+ubJpp9$">F&U8sJYX!C)uE5]YVc9N:Sf/?Q5XcC0(&tJXG.nZc3Qc;ZUY;L5WLKteKg3PYL%=0+5![f=u62m1UNcg=71FVaqL&f7n(BlgZ'C/#^"A(TtbRB-Y;ROj>%h2n#TR4hcbYKZ,ILtcA4YO9b<+Lh3grNWI[me3)afYp_h%J6=qAY;7GdRV9j[,kHRW9&dJ9l-?l?X>I&Uf-?fR.1!dq(Bq&Vpg@%SC6$ECD.=FA$?M]>isM?RXcI?UKAgnK#qW*Djga\K+Q1tu%nQ6:dSLTan'N[lL(#?qk2FcqA2r>I71'UKIirFa4Xa<J]YOT]YFW>RK^jH<JfWuH/eLMOJm;'rOr@.Lm@iHGIWm+plc/r<]]U:R_%Eer2TjHdR-oZaBr-k+LfK44UB]puH+P*l',MF1eh;8P)qUCJ'[l(_X:`I0O2_`)e?!DtkV0NX?f9uqmRLt.IC3@t@kQ4hI7AVNb-%Z54=)/D!<I6SFl!S)`+.iplBr[.tEIUlTH2RFJ;tqMt<iT$)^5j?(KWS!!LY>;,*k_g&1f9O9I:n]KV.<GJsYF+l`!`Ht123@'E+%mO-To&P&hLO%:CY#YjK]H'sQ$]W'A;B-p]k>\&/WgI`s3FDKS/=gFTV6r&%YW%+?N^rPODhDk7->i^@j1X&KOPTEOKoCPIgnJt</%LW`#E3I8pI$r7pMhV8oefeN_S`!Kf+_sQboqE>jDYXYXp(Oo4,#)2eNHla./F!:"Xi%&ub>[C+*_Iqn@RJV;[j>+X&n1"@%q-IUH%\JJ.6NmH`jS#lOb''CX'+rk:e4T!P'R)%2@Dsj?@iQ6cKT;-K[HoMnrnC6eU?!cL1(Mr9hZ!1T/Rq\B>dU)c0R(3]T##j3=H6M$K%#*KL`LYo#sG&r2*qSE)2j]fYs'%&$blQ:Ppq]D/qbg:]c&tT9aQK_$/p_U?qT/s[`VHmO%o\hru*k+p7_6^2k-oZH6lZ6<Qr^E_t%m0b[/Lm&1aG4'DM!+b+b]%eN)FQ378ZjGbc?Cgo/Tl+J`<C^L/Sh&Ysp*+MOQk'M.3K2/#.smZEZBL>Wih>r^VcnlE(i46ZKaoE^%^`aVZ=8%ci*@!Tk1BTi\Q<<aP;^'6V_lI%LR5cgDJhJp5KgdXY0GId2jX"(8(CYa&-4:.E.IicYMq,/-r20gZHDW<FFe=It178YM%\b"[G"R#;+ESC6!rkKbX1`50,A7?/eW0Fhl)XsmfJFoDgTh8SpQc2(T>Q^0Nf:ANiljN^>:>b5`K"8'uq)@2ISfD=o<rH'tHCsKe%Rr"sjql9==;nqekT$*U3T'mUB0jiSY9>3[r+#;&=qPKAOH#.$g5A]uaCZOjtZ<mVF#akPN\@^$S`Q-SZ8*0A;,u?5Tr11,a)k#%s%n&+?BVNKWkq*XaTlqil,S#Om6`BjA"Ej8m:RXqa_3lhEn2"Se]C+s^HZ4!!Xs3gH2W6`D-N[VQ:BZpO7cU8o]g^seq1DA`b3*(@J%C'Rc\#a'2R^ZS6`-0U8Q:7%5T\oC;NN_'AOVk4.M=#lEj')+&Ds6([N2FL=NG'PHW$bkZ#5Pr^^%J%>-UnD`X9Ru:4Ota:k#B=Da%-Iq;s\p!;`p:g->m^-97962c9UN$^BV;[%:p-CDT%^cGG+V=q7En9>Hhd:MX+CUF"/lR$:R'd^]eC6!4F'gV8ne=A)RB'?5=]>e.%lL;0BMnMs'AFVJBnuDY??F@NTq-8m%Yi2&V/8ueDkok_Bk+\Ks5iu_,).eQ_LIq@AqrnAOP_0<nBg+AaV@(@PmPTFeomHn6]cUn>%@-(UWQN#[k8Vr/P:;0.GR"'?1aW_]9Pi(ro6E58'KEV3cY/PcQVX*+4>[QqZI<Y]PjF;pC"I<`$+oj1ZqoL.Ha:*IFIN_Q6I2^f<%EYiD(B`bk6,HOJ2[ESNnINMQa@sABOls"ElBO80Vnt,jiSmKXU5[q25@i9;IHqi3V0=0)2+oRg$Pd1n"o(`8`TQ6PG?^?[nD0aI+%DfK?M@o+jOc._\tEO<+E1]!V$^WDKrY1u,b/f1]?U?ii\iD1ggPfZ[(I(F\h'B&+($"_AG[Z'Qan/$UD>I,c,=SDEnnqTI!j;4iU%2q$;5!YLFuCg)@8kBHFfP7sufQ)>fAV0T#&((S>>ar*KY)R"O.3U#P"eqd$eNPeSc%1%mE9ahUkb+GYiAJ-]P.uXX[D'Y7lA0]Mp%6DBG],sK3;lac0DbJd0W.b2l(cYH]W8rVX$Ocl]2\CH[+V!#qC[1).AX\oq=kQf7XBK$q;__<K@-r3\e(,T!jrgK)9Ua(Xs:]2a5%$g&F^H*n(sI;q"f\-M#W$rM>Oqh`r,NJdsMfW`>QVkWRDassI1_ClH91Lc2h`KZJ+U$4A5Ce@[N)k&r`"B6d]lns/8iDW#*>GIU^%@Wu1C3i!%QM"E-QkDMB)qG@uALEMK)JJ)Qn7@K>%1Gf->9Su^GLuX*DDbB<&r.7N>,^)oD0kK:nDo?ABbAP:RGY"Xu@Z'-4N,\[I%)u0ea#^&N$l,fFOoF%J`+3NV1lD/b;QMq\s<>\&K%(``G.=>Gb`s\J("LK#nD8gd'gP:j*ElebgO,*C7[f=`GjkGFF@o8M*b_auH%C@0;[c&U^,G%\T,dlTCrTt+L^IkI1=eI2DHWoJ3X(3,^f3:R=.n)`@uY$CtNBKMGmFOPHogeFgB0l)=D4%tW)4dI5a*TG\hY`T3@%(+.&1d0'D!32$l3HolElc*/?@XRR7O9WONG#4a(j[R-;.j\en],?\Gnr/J^=di&hVRNgWi(`"H*U3X0Ki/*$2_NX36h-1f*$S3U.%emgAF3%#2@'4`QZkaXVO9dHc8iQs:DRclNmI,C!9lCm^baK-YH6/=Vam%^K%$oVTq3iSeOhsr>&,;&dkV70\i_k$i0Ik,T0H4=D&%^$c>F%MP0tOu&eqeec/=T4H--gr0fU<65?9"X9I)rq*_=4U`k8l'lu:fH"S%aII!4XIKW[Sk54W-ki8@)7$qWD#LuYWr9]dd-aW2%3:M*"HJKoE:nnIqTg`sIck;#i.<DTr>Hr-F&gsE,.Agmu<"Qe3rK?Q[o,B/ZpBZq[H6;>PYm/DjVk88Q*+ltC4E5%RUEP]tHN^o!%J[qBj>QqqUWI?SE"GnADi$1%Nc91A"L"V<-B/Cm\0O<skA2[@WjPM-g'X$rq*]P_3a%MebPZJ^l,%lUiU9?]2Y$>RVX/RT1Ii_lg%%:)/Ee$mr:#NT[D0-5UVM8k`hJf?7F<MD7.%#a_Hm`^2aR["*4qo8!n.P+^nc">jU-@YW4NY.cokGOrn]?:go6M<_Jqdu9GAXI%`%+@Gh47lLXU+)0]@**-D$1V]'$)Z+">:hk/m=XjRP+U5m8,PX3kc5<q;?(oX7HbN?Qku=DM0hsmg#*7g%_-.qFTC@L/>U,e@!Z7bQ%mW'*<'R=M[@m'R_=AtX&3ag6F0?'fLYm*U9R!&"e<eHG+ZWGTe1jd%RS:"oFo0/),$K5'j+7d0L"%3B#^'<r+#;inPHYKdQ/Iuid%36?NM@IF#bX,D)qRI#aIGZMQHj>nM/,Vu(]!;uJ1,*sl%MTR>0nK]>g+@(mW4eBXPh9Y,a7&Np?RMeT_8,ug4A$a)7'es%Hq=f9s%_tse#ms.gGR1GpaZ+^se"0'HbH%?UF"k#EEHn5'Af@qu]@_ZC0?..>i*`u%ij41N6fA0n1/j\[4q2_"G")O0",]LKqq0%jE9/Acj%(<#)T0A6I?HMT=\33OFe/k5fk9^L^eP.hB)Hg/0>?ifDJ\+n6[#%VAD2-!%uEYco*]N,*TfXSh!5WU9-ArZ!BO,n%0`o6H/mL/6D%)=g:kgni?c_o@ZkpTZ$lo+$9uKS.aWUY<0`;?iBLh)lbfY[:T,L;mu^aF'd)NYW!+Es7<.k@#0l!dK*\fR5$HHZe<k/maGB$&#$[%EJ4&NkNaYT5InH/P:i(PjIT!FZ``QX`I]`2l20Q7c*#J^J@f]khAE8_G!Gm,*(PoopJ1V]d,]l`aVZ8O[92D$3*HG[:q[rR_Q7_(%i>cs]e[K55S?l#1lui$\gqXlWlG_!=$>/nu*=QuR=(<7CTSNl8pMoKhiWTmW0o3XC/@4\GiO>&m%4a0`#aP\bj3X"eWdRXJrI^j^%0K+!9*[`TfAitad"YniXUcfHq^7o07-Culg:,>hNjXmkkiChG4_@juO<181&>j&hScY3<S]/V^q;tucOgk4J`GYV&KDZW0Y4gQR!%')q^(2BEcZI\G_`j;CU[0o.MSkO6liE/2]X7dfSc%N8Ia'iJg?LP9R@]iW:PH?Z3\1\)_A6jIGt.d=`ElJ_`:=\.ThRb!!75!2BT%+1o3#5FjZN>]LQPT(3-U=904<^Rb't2"U?9'#ih[.%'(Q-."<[0;m.=5g^]&o5bVC^BO'#3DM_bh(LXiPO.Bd(V/jb;t91GJ]9[)%5POM1@@WUK?Bj^NS#.YhqBO@93qAmOUYjmg:RT^<7SAcibq`AsR*TiI<["+)+*m1fMpK/+d7lC)atL4/TY:U`aAP&FI3@\i0:6MK%dG3@P%%KK?CS[AL(\@CIU:9&0Ve1]+Mqlop(,96"!OQIbO4JKG$JDV(>+Ij?s+613%L$<1'<?*Eo[>1df\ehm9R=<Y@L0%PK5Eic%bS@@["lDc3&NQ1r84G`'\qpsY.P-4P"":ADciKc2O3LEA_($r6Ui4<_%;tn8+I,Jm&%-IU2M9qe'@fpAR"o##A=^i?A)Zu1&esCV%(0h/)oV4\-S*Hf%6=l[*a2WWi*:]L0lQja*XpQiecdhY5rT,iU!gGA0<Zlct4V>C&<KIDZH@P:$1fJO5091r*j"%ri@KD\fI[ha`%o>3(5eL-Jt5L3fL<,)1Z<t7rd6-"kA<.%FMn\Uu1>m/J+?S44c!Nksb)02]$lq0eVR4MNHhuZOs0CIiYYJa-!WAXm!<UpfkiGeX-%E8X_;e#;Y7^-s;BZkg:WOVM6!LWqGTPrM0i2+7:Y;H`'I2npBd;Aq*O<bq@9`c@Sf+0b4la`qEO4F^Ef)B6Gf]*`_G:VTB>a5FE+%Yc99c@KB_b`6LmB?iq/`S)X&p+1sT?!WbO&G4h#"0Fc2qJ@Q4G_sHqD\0"Y+@DT.T_2Z6Ff(0AGiSX!E?MMGG-((4;#c_hHBo0EC%k.C:N,7ilsg-:ND,_K.#<+l]8/BCA*R,X]`q(uHK0@8-k\DXt-5@hn4BR\Zp+-3)@GCD.+jR3@YO[pgk\%?s#\P2UsBhtK:YeY[t%D3hugRh2K)bO3S&H7+8K<:bgL0T;F>j^ip5Ta(46X\_R]JB;TMqp'NeA[0^Bl%&\^.q"u>$LEnn<Orr<_79+=@kAJ?SGDmLTTSBS%OTT,*Z3L"(FYrMuQpIXf51JI3Gj[[ub'q*K%ZlHgO@n<V+1ZDPEM+iu)a=FOXO')TVbZ.8@!6S"6%TIB[R&'N$pa!):"+=(fV;1I%2kNuhs3j9:Hq=Fp+(hB^!``R7YJ+uMN?pXE\9=6&bOo?25pE[`la+^j5T[S2^i(AnBM7-Za<sD5aYHGN@robkW#c2i;VXPJmi?q5%]P"cYB9E71I!YDs<eHn3:8`L^Vj`0OAf)l`Mbc!%@i1P$7ZHPe<N\PibJNH>nf-u)35N=+GT=;-n3CXlRm<mQM50SU%6q_Ff6un'%X#F*jRh"E_28VCNZc>B;p&U-(O!PA,faD9VG,`1jH0d86?g$iWg'ND]:Bc&.HIRX"&X>R&5t+M)H(%9/:Gjk(9WZH0i]\1B8)&mI%F#fHH6Pg$bE?G%/kGhu&=]&KH*6H(@K/&X*Vf0^(Zs;=37Wb;F9tEIfjj8E=D*C^D^jD('J%UKJ0^7abT"aM5E5KpJeN_a`c0LE9%@4Hsi9@sFJicL?%Zi4(hb4"e?j,;Y7o#-O8kZcF2=+q;qkG+AkpmLS^Qq'3=)?'P)W0b6Ebld<N\TrW.^9J3=Ws#EBVa(QY_0ft9%#A:UArpuh<d1eRmXTtCQZ3!>LB"q98E:.2&I5ImMK"?@l/GR@*FQGsa,rF$A?P`r[(!4fmrb!e>]$JDraf*,TJddE4#7%?l#g&!T%@k,PiVMU<sjq?!!5CZ#an[YQ$q"26uBJR6^/j3Qpg,p6rj5]dkVKBkuTB\#l9=H%3Lqmbg[(%B-0`#2>q#S=$2HJ/D&)SCE/W'jo%@/_W(^oRou?k2#=oBg&p5h1pn7m]B=H6i,(_+06GPu(^Lnr^ZdDD+g*s#[4HdaRZ3bMfc?%"%JYc+ghkbMf0[*Hop.9n[;G(b^W]%,u3-]bhP9*1n&#`T\Y1L>X?$',WGOG/=q<uP,hBHmEW-7(gh!@DGB1$a6^B5ZYJo"\NfLaDoK*[l?:i[1[scn>+@JMCthba\&N=>%2&LaUfj:0:XsW1#qg14=F]H((M9Jn:m(P@NQa*A%JmdDA`Y!+;Yr0d\P/"]HBpf/"(adD_PM)U<T:]]j?"R@\R,sZYCD+*-5J3>h%!]Jp]0#NoO]A^H5gK'l](AmJ>+1S#dYr7("i8>0qrV=ab0<jATa!WF>qq1N\"M:WZTAu&OcR,dV6G309p+o;cH;K22ip#`=fXFL[%O[#n(GuaVX0]R@mG*0rj`%_H)ir*EogpPUQE]jhEIKsN;???0Js/U(IrI#-$#6`D9>GKEhfdY:rCi_(tT[I1'C^bn?-TsMS\Rnag%mMf^R]qc-ICNUH)C.ts8rr*kJksfk_/\\i7.Da7lQYs<Rs8Cao]B@GRci>rDDQRM@"EcZdW*%kp0-C3-ES'@j,lH0pq_MBdV_HHP%0P.j?5r!*d>d)g&UQ[SmLdGuEVL1E/;S!YX"JX^pp[PL.:%tmf#G"K:S5*L37<("g[_G]20#foA'!Hm!Z&M&N/>73M0,8nbmTtnY%kX>*"1\Lsum9+qM-Lk<;5NW'-W4'jEQL!GSqP1+RD"+CFca+^%`'X;$?Jcl*>LBmlKCYu;Ag[i:2;KU7=.*`pV(\&qnEo;RH>*@(%"g!G]6Rr0g)MUHW%`ZUApM9?l%#XO\F#;Bm,Z&hKFdTs_d[+b(1bIP%cSX7P$Y>ijq#g?,HD8t+c#Et."5=Tm3R>`KQ_dXWs4Erf%@U\/pU=>J>`=l#Yf;_n9fR3a:d^/_;M.SI1SD)g<7:9mpf9S"!gJ,\G42`''W?fdg^*`)\9aC)62G&hL/-(n!Z.hUS1HJ?XLb"pP%meum#e/C:C6hNQFGV.X5=iE=ahlXDYl4js.)ZUEfnR_cc6RKQh@J&7ddmUBI1A8fncQ?=f+r\*$#1(%#1jYm``,2#F?JI#+pr+\1%I_Wtb^4bL=FEi#\7-dQ=jXh30]48T=I_'X`#tIeZ>[C2[3CnDmf.V_'o\G:(T3i1+E#Gj)6<?rC:RJYdM!3Nu&#522ZMn'?:<fu8%EOc*kIe/u'1H`pg0C7m+DmmGI%.u2LC36d7mqe:PCSaDIlcW71Qm_]-i\=>u]J'llg"QmsHRV)7(XCHAD).48`Y''`kVee;#OVS!%Ksg3KfV&RV&WVBN/!VUUg$Eg0%nK#'7$O[-h,%<6k6m1Ql=2S/-9B0m`dFP5S\5^."Mj/d_.:r7N'!'?,r^WJkBrENIntRPB5n2a%5NhZ0he)=YDn"k"MqgfRIdn")7J_"G?#b-!BN:jE^KgE",>EE1ZT79@R3ShsDp/4s&#`$)?5;l*,]jd05T9On2,Bh8k"(p'-_`j/%Y"Xs!'KW>=Hc4b9YKco9'^d&a(.d+GDmbm+>9WqjMMEj-'e)n:<6uDuWKW6@jN3Y%Da-rs6<ZN40p%_c>mre3.I^dsY925+i8f+I%nf"4pYE!AYPrZJ!"p$//=^e.f7)9LMCj:$*:m%cJ/>@",5*!;e(.\gMG'q0TVF]n7GM3C<#q.]WI@ci#20%QDT5_h,1ShA=-gC=$%c<oJRO:h^?T2^pS(B(0QeK/>#k"(p'GG=S5\hia<6",6-*CLuaAk636U)7'?>P+1D4R)Q;2\nRL6tc+*o`u]MXH<1b&3/iNSh!(K%9jM(8?RoCD=[Ms)p)/st[E@Dn7%/TE'QcKd8J.6>I*<"ub<%p:rQ_sii@Tu8)Ne>0Apm=JWBhbu[Qs]S-Yi2>*$[m7Afu%Qr)W6-%6OQhg[Dr$A-.;+gdUgE,.?aVQCR03)H/_O)Hr)h.ep=G.Di41\6;B(oer.r8&0l=C:&8$?*i=&%!pR8qiT'GaD2RuU]G3+f$8NKm%D)B\!7gfC50uWt6^#'goohFo<.@1=-,(3fdDD>%b?WR%bWWnNVXH43R`pI]]*9g2?5C6,NZNd4=q&c<Ts+FM_!qR_aj#'[GOZ!^c%7K'#BT.M-l)2'iV121V9:]2BY;$1EAkP/k*m-A<BmRTZ*&-<&1F%fhEa"UEV,j?iDO[`sShW5nI)HMt%(.gbj,+c82[K&iso+b-t%2A&?QkIu>b5[I6tE-!3II:'oGFl`5IK;YQP9>CUBUT:,n:56=%nIH`o/<*25rH#`,1k$CkpU!oGG`NLT.=GO+<%q4'7I9@!lTEaE%XWjRZ$A#C7j+F8Km0+W/<i#=<h&=mt?92No2T(/@I]cc//kt4VS"9b&nJ5A3]KJiLc$B!/ln+/]+lr0*NcO?cR=m#s`[k1N,169&%[Q,aa:M!O<p3&RYDVe#@_cp^E98`sL-=8b(Y:ko!WLLs+Xi9&6C&-cZE,PZ`9YA!MQ!c;S[!9nTY#EI(M8e6?=#J8dKMC@pf.Wr$%8Z@dX`@Afg17$nL\*S+Jq3k)_]M8/BZAHVdiN5GO8ga%P2!\d*^+P*X=n_j>r9[Lqn8m`irT8%%mm&,tbT$AN`VZR*&Nu1Q(2l^X%POP6gS%jB#YHiAsYkY=,`SL^#$?r\&h=uD[je9fNjqDl\&E4$t'^Iqg(D[67?1Y87M"gA%T8Ng#\),0[c@aGaI;\b%2EP^0]"E.M%f&oEh,HL:4bf.hDAq]$D#bbD40q*IG:NE=NQ_/8)^mjh@ijUEPKD0$X5jC)N<521'rJ@N5nP-9M8d_Di+"Y*]dUtG<\7V8!CSpbU%4G!&Pkm?J>*^-3P&+D(gSU6Fde\=LJ<TJXA4lLD`Cn[a--[q@DRgbrI[1pWY@ZFdbitHB%T9e-__-YPk6:#r8m@Ufa@,W-e_;0t5%jlYo[3]X6q-"lCSU/f%O6Q1g]bE;#T[#XPY>.q+.bP9trOWG3#_Nm`L6AE1Y5ft."QSbR8)_,#3dcV,[Ud\)')JQH9HWH6VaL]`k%j\(BDm.*k?=rcf6r2rK2e;gos]hR<sOEQYF%ooEUj`FV><m_fkN4<_>Ng+g<[RPR>kRkC/WCMkp#7I?c9nMi\Z9m9P7#J)9+q_<N%/%.u"OWo.JDFNEDMH$r8oR4D42N0+'!a>c%a%t,K>VA1!lJ3G'%<LF$k/#<1a$IDlZ8(i`U]p%i+tZ#4cOEeh^(0sjRE>A1jF2?r%,5^g1'1Sk#1?49OG<k2hOS%_+d"H=VHjKP59^#55T;opS*`$+K;S/EB)/*]2P+;A0pVs-DT[-$@]/_P@F/U2e(rBNUZj5=VRNhp&%T)u#\M]c!(QV?PTRQho4<I7pWA8*MpO+67@;KnDY"Z2XWN-W,3%q5a6UER&37d32kQu(.r%08>.0@m2no,)2EAH:c.o>S:<F$l]2%9gUp06hl^5:GH1.Tr>$oQ,+7EUasX]7)sfFZp)#ls3A`,`N4PAYI95]:\-#J2M15hdH;&7=6mjZF=$GbnqRd;XnE<0HQ'+9QLjVs%f#H('NJM-Jm(o.D?![d&XqHZf3r+2Eb#p3$.2:6Oeq@i\SWl%,]G97t.OX[Yq:=>mmOgS1)+;elBP\AGq7#]iMa6O??M(b?CIdD0%:ZgQt70Ng2:;C?7=>J#mB4_)0AmsF8/DEPUc`8tf\jF"knt=0<@bZ30qCT<K+.\]J)g+lY`C*V=*Ngd_YrIN?)FAP8NOmgo/W].B%jZgbu1)H_3TrD?mXQbh#KZV!j,!$%*9LBhm'A[Ea=Dt6ULFHARqo*)CilTpejt#kHZ-q(0$IaYbS/em:QArO<!+l]JAt:OYRqtq8%j1K.K<.5k348W093Or9h.Tq^A-m'*%87P)Kc.Sg[+.*KbZBXt`MZ-.E&-oI7Gb]P'79]7OoQq351UIO2Er=O`A^iAuGnD[R3uQ39%9WTr.OQb8YOop/J(_ZVT5-pN^:.7qjfjiQrJq[Z;B/AgtYuB.F<K11&GrH`#!PdFFH8;,id.ipISlhq@dBu[]%W$6`g)^JG*T6fY%Zt`K2ReoiMd*e_RKPY.D@VbT$7W=nikC!2>MQ3C^:>Q.VkG4NTDjSZ5'\GI]_ld:V2/s&KMWZqeUh\HIJRWps]-G;e&oD-98WbT]%dAY:<F'.n@QI&UQDf-SrD8gLDe=K*LNTAG'[,uD1=0aZd?/?:ugY>gX)*RL1AnA/6]e;2'%3/r!20X0g([#+i2NfH%3H^k(I6\an%[ToM$YrZnD7^2)LEio`QX81a_R-\'?6UO77ag<M_Uk"Y`(i@HuBX2O0b70S^A?_m-VCF(ee6k3+ai,Q#-,cq?6h2,8Mr]*9d'bU:%fF3=":ualIi@Spi4tJ#d\7#W.9lbM<C=JON5iFHBPl&#DP5p.4*H163>P@MJIX>X%EgK.fk8()"i$b1jZfJO!53dRq:%!e9?p[%m%_@<5gZ&a$2q;aaV`#!^gm!q<+lUNY<E&trih&a[26H"cK5cgqcA:0t#$kjW&1%KAL_!>;K?+MjfE2s8$>q?$Cj<OQQ=PE3o&JFpg%NWKCMS72^Hfh9kEQT9?_0F<:!3=TmLa`">8/m$Qn(?(8#-./7o*aN*1R"Wou>qR/9kZhntFS(^bb;^f,-!;pf`b^hULfM(lW+-RG%d;uT_DX&DTH;b`!9d]M0FP1>"l\Y*$3\[G-0o4^.DFlqC*Y[:<]dC/4'%YHJ>1T`?>47AdU^6"iH^HHtUCQ(2cf;JUr)R(+gbp'F%T@^c`K+>HY3PB6*H<U]+Bc4,lo\F\DYn%V]<`P]E/W6RFD5N(&>?8,OoW$4*$gRJ)5d-bop@HRYf',14K^d:Q'.EVs2Y;9+<Rb`q%$3?&GR4fbFfuI;/0Oe+OSAfM"[G6mGnYk->4O"f%H8p4@EeDrACZ62Vc8-#!Gr*J,2)9Fj3#h-GNPBB59YWp(OV63H%q:N')]N'T%<48tF#/#t4:cMYa?;Ok.(4E:9poKF1VgF2pe<lj\YF0mC8@3o(7&t5YdB"N;0K8\JdH1PkC:/*jh?95=U5uB+*NgM.@+=V1;ANMj%g;0q5^MYCG[[?sbbpAf]liP)X?)#mDZhB:81b>!=;FG_+O(.g&=[oi;F9?\Y=F/?*V*f;C7BnG@VOW/=S.$5mFZJ:Qi*am]dt=JA%m<hJHL=8i;.M;I#`%1oC7*+AuD^f:jVjm.(0M^c6P@)>kh:Y%Z>7Q81,g9FO7RM'gf&3<A76!AIJ\Y)U/]#u&pU+tAB9&f[DRu9e%JSc7sZdXUO.<_E:L6&t!pGsXLqo--c2ieJp=DJV<,0/8M6NH8eIC.LX3mRkXm2U2h_?b:FG1U2aRtn@E[FjLlp:UrnU^MCp@ZP-p%]bqNNG:ae)g<a.BaqCRsE(0/g%1Tl[D$^`P\kp8LZM.q2m7=2M:M.17eWnk5;sH7L93VDMojR*Fl:?bEV1$8`3=BUR8dCZb/<^+%%UC$2#dKNIPF\r<H=f\IQf^!W)7;6K#&Nr.EkB<o(0GRE3Cd**NORh_Hdi"Wc5"S1<FtgT<MCE#/QC]\YP%?c/;DGTA2GT^[c8BBe%s4OoKhMRO--5UpdRAYVLDrc#`>8BL&)HD]->W,d!6,47rR<U=&SA^Vn<X/1@M)\YIrRMaOKo(qO6u=j>!_8n(WY/)q*Aknk/8R,Q%'TFZ_J5h.eg_=XX:O>!Xn*Z#'KYDqN-o8$c$1m,1=U(G?]:U'(q[C'$N1hhEkj1+h7.59m*'3s*3kK4E9lfIa1[+JaK%oJ8fk8[B%]_fgEZd5:#A.*:G6YE#WkOS$gLX&)9%e&i<6OoZ84e2JXLE&AP$p&5>DO2>(q[>O-*a>7(Vr*SPSRFE6ZaO`F^ftFQV1(@<P#\<e%H9>E@EVlj!F-&&OZ2/Y!=^+$qZQmtFU_i5oh./1Lobq31`-S?77W_hYZ<?!t(3#WL(3C*UdBE)n!"82L5A\0=c^](5^W="^igAqa%`LQTqZHdi&'*bdWdV?oEMN2SA2!7Q`4GPcB>.:tRZNR9;[Xs<VheFsg7t*[<F5l%Rdq#2t\n5`h/%]]M-G/Md6>dPUPkE5&&S!iS%c$\3akU!?*G2$a^LgF6d@;OM;[BAat2["\0Z5H'D^EG<0(+erXMa@<!9u5bORq+]DPZc7`-i5J*)Q22`42Z#K5RWlLVAlA!8pPeZ%;]+-`p'%e1ClLSi%%XL2*!TK^,b:Z4!mu0A<Wh2>Z/7)?%.@3#bQE2tfUEPDjRLnF?/Tt"?)MAH_cXP68e"s,VktaVkEcrYZ8&3#%,4Nr-lTOa[coE"/iFq$gp^Qfh`qF$S*,^kY[l,VRRMg3-]FqI&GX%^pY'a>aVJH<-Y>obAf\7=JAL!(80845t8P,Xn9/1kQQ^b*n%FBTsQ#((/Z#GP:'S%pFHFj%:k9tm,p>$(f%"cd0Vj#njj=YmZ+k=6#P(mbnKD^Dc+j6Tp=&OC!"%uti7J^Ubr]b[aEWfFFi9sgm?%>E7(qb)!IOA"DVfIdXBeL\2:TJaG%GTfH1_*BEI;Q]h<0-d$-NcKn*eIGTkFmDt3.=g;GUODV.]SEVid,]'aF.`n!>D1\:7e?R;T%1)keHlnN1:f4il(Z,\E[[.$)HY4cRQ-a#=dE_7_>.ZU)(j:"+?/?g`_cE^#rHt8Je[S]H4VFgDl>0JV:c<3PIh<o@i8T?X_17m<A%:0u3T&K1F9R',uDS4$o5an!:9]@8GR6tDN>^,9fGk]3#GN;fs\Z@&s)f1[ADlL#/FBkWu+A5'94L#6`+#]%Iq,pRQEr4G`J1)=kY%7$r*Ym2[P:!,Yh.SEt'Y6u'8qBHFq]XPYu)`)rUspQ:Ya?75,a$oi5``$el95=$=F27&j[HB%8:%IMBSq'J+SI[QKBD-^855%`HY%@$N=R0!B0!]o8gM<6J&2le1IOWB/<_;gA6F&Y**=I7TWhPFZR@"3cNJL2H6Qk-Ns-,q:t-g@IK%OUii-LKP9+h`2crS+FZYc\F=6%"hjAP\=IfA3mNLbZU8k2q/BF_mlU^(jhmLX#\pn7E8,b"j)-8jq/=%DE$jb.,%,cCLN@E,^`N(*1uk=dd^SCe3"oZC@T`q);RTl(%1ZXH/ll!n7Sk-a2_q)8mP<G$Y]-OhSqt8dol]Da!\.`m7*4qcXN`UH;*/!jq8S]#e%)^aUa'OG)l8P4$JR:(XlF$^Jj*kWTmb:K(%PGLC+_IfErURQqZm6Ba$?@0eM\llOd2s=g\&(WPW6B52D_u/9\(?qV!CE2QOLM?NGh90NJ(lmE/FQU8G3'0f$/JOS*4.^R>_QdEC%2a:$[EgnofVE\O%h.^P+:b/G$U)jLJ0e?;4es*UaW&5HlO8I!hIJ_i17OeDm?Uj>8miF5^ab/501/aSH=!;o=c8&8uc;&CYP:u(^%<0=Sj0m0*Hbt)u+%(+S32W*,A-]$$@WLIc\67;':IA)p?)#(-M#\S-/.2C-+NpS\=%bY?-GP()\\OA!<e[Xs)'lKqZV;kObc2>_$%;rJ-t&2e)"81L-D<+56pE)uK`L]/1T:FDmPE.5)eifehD`+CC6)sson]cF&+'$fS-Z2N@.%Ka]WR/S6!*Gh+o>^siaAr@&nD"MNh%l=^LEB'TN@nlpsuBsBWgDDj>n+\-4?UF,7lM?)Ii\&OiAZY]Ks$So8rf.ScN;L#.:U5M\k5PmEUSDE?4Us#7P6n]X'LY^-WmQ=U`%5F[$)=a2DsU#nqTnFTcF:aaA;S7iSqE3CU[r*Y]SG($O<`BjkmGU63^Fut(rY%kjU\eMAZ4T"tkQ0e3TR<=7%js+^um-qF:(.d+G%FK+uG<O1AJ%(ds*N>,[!D2As4Wnk#(`U`=NljV!ReJP,KW_WZ5=%t29NQH)%K$9ogL)o<`afmiT1aA;WM*a4"[6TW;j7>%X\PK8:%[t\1ogC\4\[!6rmU*<mRO3`1%^M6pq]sAmNFnrid.EJcA^0]0IlB-=!Jc$eLB"&2=730pRZ\5$D3+%V%M9eFLm/UTL5$?rHeHpYQ%ArMJCl6W!g.+G?ST)5p"DN,D_O>Z1PY7]k9CiFE\g2gjc<F_@g^[.!o?eKL3h5K\/rM9/a4;@7,D`>e+h'6QYVTMXma__lK><2=l%lYOY!b=eos7pNg4ch8!^2>d7DFGZN!s"*SdF1>:qD3NQ-2;jkc%^o:#c;NErr]'*4A[:a:I'`4Cc7Ybo([9a<Rr6t?b\#OMAq#7K%L"fZeSQRS9q=u_VACHsc"AS%%NnJMd\TBoD5&RT`D7S,ElYJTa=cBoAHci3A"1@iUOH$U2ba`ul)L7N_3jWrINNV&82P!u'SRH)?%&(u&:E>JM`E;R_R1Q/ZAhWqn]l"nYUg1*%3=Y?7on)us@l-,AM*rWcae!W)8Gd?l-flUidkONM$SiXri1E/R-h,$1Ee#e4*H`-?K%flYfRjZ^$82PSjTflX9fcrk,\cDK?^@[grXR<_o;]k>f^!Pl7rHd/ED"5qm[2P&N9aiY\"S[7S)Ep8P>lgEGJB'Eh%Q'$K*e!]=G%)>22@flUiEd+t"qQY\\fR9Y*[VDHDlZal-8G6dWmQ^_Cgcu?a%DiKV40L<omTY&>%*6o1h*(p[e]%Hb*F_4@R[4\o!YKk_1E(6b5%2r!Vb<2#I0:]/(\@H!.KEXO`j_(t?0]MY_(E[1u3h(H/K5FFB#gtcu/+J7L>S]iuifLZo!3d%"=?<nnEhBOdYHQHJX<J&=NCR`D8%7Z1DVFLOQ]Re\gbqK&g0RH0iEF([(5/fh#(42'e%-BlVU,+YJb_<ptE9,HFOfV-J7:i+bE('iIH3Jf.jDLUE&AOOr.U,sa58m/cA%mc<04:%eTl7YU'tHLT:_cPrEr2(e8Kcf.'9lR;ROr>$^C>26T.0$gokBJ0SZVm:Nr4HXO+FTq+,ZRkM,ha8UDg:b6R7i@'4RlHpM%V'3^[HeCef[LE*P3SDL`>?F@tjqC`bQAWucCac@W*gEfCg#>=%j)1gLrcUZZp:2-Bk&<9/RZ5SBOjhF]-M,X"o25jK@X/s'bI\X^%m8T\&9>YXkSUhW86$?ID$Er@?Kn6@%XL5Tih3_<F*)Wf*3M#1dHS+X_<'UR;]@b3AZaTZA0ZqegE/j:k,iqf\?m):uqd+,u#\:(5%NB=)4b]l_.)Gf./%s<:Fe(s/`]Y3-/Lihb81,^4$QAH$>bl.@Qd7$Fg1ETBp]:'DdePh@7>-5e`2Tt9j\Ar@GLuN8uA\9C1_i&aJ%'?!(s@D`gdA:"J\&fFGnf4Lm>S;',]E2Vi"Rbr+oeMLOAiGSO>X#ITJcGgdCGMMR1o._':dnP+'VN9c,o(J65A9GrK`k=,jg3Y,!%aiQu8)rGVDk.]HoC(+nV%<kQC2+O-8p6+&SD:c#c?C`Ip2@g^AEa`8!'5O'B/^of4"".'7q7)3ug:(Fqm.O0"\J!k;)U1$!,6Hfi%+gDeKOZ,>SqdSmM=J#u!h--R6'@JXql#EKrG*<e,eZXjZqSOZ/n7h'qQKI$_l[rbjAq5LZVT-j<C[&7Zg,,[lN%em^]4P;!*VZJ&%2e-Q6jccGn[?Dl5`m!AQDspc%6r0^P9ZipCX+C^-qHtnB2_kf\N7<[41aY_I@5\`V(kr;h2R5f=3&D&9/Ib([mpa`cf?D^Qj[foY%B@_tgZs.-qX`98hY1SOE1Z$NhAH3U!1(?urA&GD7hcRM#@!fB@majV1k#g_*b'IAId@P2NQni28gZ>rFZ^6I`)IYFLEgg,i4.De)%?84n;rg\=YH#kWmkPO%-I[3Tmf_`j.-IU1O1XRu3``\eRMT7g.2c#;`)=Cq6:PZ,cq/@r>8ks`@\`iH>?Ic?E/fu]jg:jga_M`gI%]EunP/!KW4>Lp?7o7K@WC5J0'gh1NLOLi*a4`&h'0dG+B]5-iOJd/2<95HMI#NqQ.L%1m!k39KuC6AC;i3Q*ORk6irdj.&K(aa4]%FJQHgcB*cn\6VnfdoX0*^Cd<#_&@Cp-MR8#8<5:WmuA.2Xr1.5hDbH1p;rK57/m%jBRuC$kq4VG,/(rd2&c9%:JIehpdn)pN3A2S%H+d/"HI?,8)>@@S&OaWG($eG+ZGN%ISas]N/;Ga"5M=&5;eFb/DVJ\u4C-6OMqRX=l2ED!h>E_jY:EEZ+sb_g8\\#i,\B<o1href%0NO$)8<3(OCXm4GEat@u#4!Cp<';sR6$"`%AiI'/ju1stAWm++4F(uEXL*+31o5W)Nqd<t@*WW`p>e-bZFR,0HIap@091nWI$YV/%-ekI!>/uIYS1cetZr1@[<qjW!`DpHSZ?Z<fdbL1'T#p(f>^b\(/mm>N@.CdIHT<r9O%+Upfgm4\4fn3>fA:\3O+$*`E,HnZ\_3/=%L?D`Y)-Jlc*R4'5&6b;#kVQX_Xk//T=msdZ&g&oG)JN%^A(GJfTOQekV\5jq/be?O3sZ'Q$jIM!pWSJp#u7Y,dh1ogqQMKVO<(3c%h6f$5A-guqK&ZW*(QA'DV'k+Kg*k"d'$9pfqE%Uq-^&lpcT+flGN0[DFiKn')Cma\2?2e!XD<+,JHK[mgSC*_8irgMlK,]n.];6q%/*g0MS]4HlB5qtc&De?^4@BU(Ij\W$#OTrPf@g4/Hhm+W'O,q!O7Q+EqkP(B:Pplm^fJm;=04i4^2/u:kVNOk\>+D/">L.aVgPM!%'o983a,Y0?dHGM@"_\l?WuOCL%b3/:!:=he<n>6ubQ9W*MPZ*=\e!A,KQan':ScXO=b+(,Z,m#Oag&,sa"B=9BmetnZ2h"rUlUcX%egn`5XRsYC4`,QqhaTQ1D1*k*rjJnXl;BgPW5ANej]d3ZgHI7O'7Jr*rQr[W;EhaV\Ch=9>?o<`(5:NCV0o`G,Ob"t5,\-VmVjVI%/ujF?<FO`8)Keu&PT"@XX5?+dL-kY2m3Rs3DeDH)G-@OPCW=;i/U#m;hWner'f*n9g?N!/"'6CYp"T1V.-&!ip/)u+:OL',r@CE/%]%,-lCoC(solJ'n45]@:^GA7k\_?:S56mT]Haq['biH&:k:6=>a*[dO]=*$8j`^Cpg#))(eI<WJp\NQeaF&d.k4e_?%[6jjk$-X,%B><KNi[eb+Fe#<N=XG5)XM17nos7_AGa2nPp\NS#lF5^Y<0m:Tft4g2]:_*sf?\9bP^9CfcM-kr+m7\W]mfZOnEB?"?9e;j(!Vd,%SaQ0W:Rj;a8DWQ;5P#$nq,T_tm0m4VlaOG7:4'%6]ME8-oG$Or5C6i$1?blXn+AJBVbp+nd7`3l?9e;rfD:HUmI0_sj_q9VlF1fZ%eX#t+fb72rO_r]srG:Y#*HCX6me*nn*T#^<^)]u=d,2mQHesDNXaZaPF-tkNB>6iN^"[_:Hi<:_GqnK1pNul*DtVj\<nb.`)(tB,%me*nnD`7#-f_/W9qcj#B\;tQ\9cA3Lna1^kNcM2X?LHiXlUs<!]j^S?^J1lj1J!nhme'dU[a<jqVdp5'Gd!aV?Db4.D3L6n\X?sL%@iO:jB4pA>rIVf!Q[A])OnZHd?9`(JYIiZWVa,6H2u7^lqJE\(b2cmDm??Lo>Q&[<,AUAG2U6TR]@G6iPd?A;os9`iOr:Ku`O<G2%c[MY<8k`sBHi:%oj-Xs'F.Vt;pGn_.45]A5R:!Ml]m`#Y[;r>*0"V@rp\NQaKZdecGMTr]p4f9HP.9PcIeF)QW^bk4?9e<krClR_%XmYkg1P/"6AfpdD3ON:=]@ThCP/^`)CpRn9\C]&53NU?^FF:9a]lK2c-+$Vh=]#\E`hpkP?<H%R@5q>G4q\&s;=A9e]6G(>E]Vrn%][s&5)WV_K]$mk>*:'K8Dkmhf@DT$M#_LM.j:j"K)sfKN+@6rS*oF#Jkm9jUXs.sV30Gdlk-Gp_:O</VfkiS4N??W1=0Zk+%F2^A%U6B0[Ut"L[_"m<DbCShciV0,UGL;'+%lSl9HT]Mt#NK"LV#*:a]=_s^o%W(,SOtOmpq6SYGADeLrDrcCW0,R"=7,mn5HGZr=3H@g%dI1j-Z9eN:F6r(%<"5FJ9nP*u`QVQXS]k^<Olp-#SOC00dJ'X?V:'eu$Ge6"o(Qfs6$(pFcHTtanZ!u+?G,i*R@@XS[*>D&!caeW%$MTSbU3JZ.-Ajb6hm6Jc4?Qhs-VrkPU$EKZ\4=]K9`F1,BDhEQ)A3QUHR&(l>[o\\>oo_CH.+Vc8CG$+r6jYROaAOQ.tt>%=^/Q@%;S5Nh,kH@q:95V\e@t6=?mj8uA+nXJG[1fJoi:ACnhY;#3;,O9O8.14``oP[02FcI(MA\GI)Q;TjA6\j[sXRD*<-"C":OgR_F<*5%lb<NLUBJk(:b=U^rHub&VpD8bW/Ic%F$bbnB%3u_g.+ekF7-sMN&./pr+"m`+Ve8cE^>7j75K4hP_-3AbLBVlr]4=o5Hf]+m-MA-%*8PbCn!AeUgf#]o*6a>i)R$.dMiU'oj9t*:hIXN)]!rmS+7Y$-S*`/0,T<1m^-26+M!3;19JoG5&.rdYL67K\69?C.k\F"^B9N@E%?9a6RYd/(04Mf;S&WJMor"CKER_[6o&HB\H2Vn<u5mkLi!JoPCI\Ml9M9eN+s&pb`5#T)DBuMl\G*fTG%2%Vrj[DH3,3s(p0@8!Q%c)WnY;-l\u07%8<apUQ-,(+M&/\eghj.;FQb!ArT$f];]Y?8L5&SWc!_AYDQBq.G";+W(PXpL>s1a5S/KgJ!Q&U*KXX2)FYMH*hY%&tRHj)qO5>,@D9/\f^&m,$&Hb=TmoR^rOHYmEuIC.=l?N]TUoA+em;:@.^HWT],9d#f!56Cg8.,I72(AplBZO)V2RsOPp.0SIuH'%>*bE%0guW%i4U&A:&l4j!-RZ6/>3);7M"[=@/Y2e-L8luRX=Mu6shK4q-RkXM3FQ=WUsk%RA\5hO.Rns;>t->+;<]gU^eE1/"IiQ%n587f.edsLMA%,a^5:eri8i[t:._;*f+1"2WP$"!OIiCW%"X4k+;um^"S!diZW3sD&=e"CD.@i=_>a'k.=CkVBmG[64RN%pYF&_s%iMhM,dSfr4U=HeFPA7CFc_b$.^es0D.WCX&"Bjfe#b2`qJ>^=s.QX2nA#YYr2QJd6!lo7eYJg;dk?W1a5UlJJLI#fa@OVnR.m<f^%p]s=8R/>h)gDmnd.c#N:G#64M+26;>hnTO_\UZ)DRKk]>>^\\#rm\,.qB0QmE]::4?GM_KR#0:d>NHKlYl:ZC?VQ/-+Gnr#Y#PCV%*Zl7\q2QZ@iR`r$@=_n3je1&_GA,J0Zn[ufo$3$!Fq-:FK5lGNI;iJOr(1o>V<m@fh#U`&R_ciXl,mJjNs=bS?a^BmiC.?%Mfg*P%j4h13Jg;TJW?-\:loH>M\Kd+G4haP4(h6X+2M5q$YB18Geaaa&>W?NbbUUh(M6c>fiQ>-n^;Xda8mI6K"LsU\I!UbpQEBF*fG+6]%1pE!IW(W*_`FYXIB672Dh#^_^F[Kb(ZFuXgWYS!=;D<]q04%Wi21=Jr3,sMi\2!!r'?WP^E(E3FKE7e(,ERZP9;TnjJ5eEd#bjVF%.4iin;1:9^D3$ZURM^V*A"\[\$Y5JEa^:Us1Em7:-GuXr8$aZM0'I1K((MSlCfnGA%6Zs0T(Qgt5':,%4HjGb3q6T9b<2OZbgdOT%osKhJhLKa:U@Hk@.E<0%D!=g!4qBH!4dHO@Hs*msW4#/3*u!,r6mAGjT^EAO:RMJ^'GEcHc+o]O-B]K1Y:1`A_tR1^6s.1[-q#a/%i"7^U_2JM=lIP-^8C0K60ru\?k7S@,XiBuJLW"cM.sj92mq;Q0K`n7HaMCXmP5m.9KbM]*5WkQCA7Ft=+;'0.P$/L*Dm$2:i'alk%Uio\M>B<iN"ejmD3rl#"D[JhDSp?)L!3q[fl#uF\B#KONqkM%eTMoN)6"jDAX):b%Vrt;,6\o3@G!jIlfVAuQHer?6Hl&Y8j%;]o%k9,/HeR1/EmH:pt:A/DtEWZk&!%h8i-XhBP?g9p:i<V/YjjWe^<o$T_dVLo)\UPYBN+EP$Y7ZGB0=PA+Zk%=i^,1@:\^HY*ckfo_%Vt)-2b10\<Gs#Sb4ho-epuj'$hReojr$mb!RSTZ[a'l1L<XduXa8?k_/lNh_mjbjF=pA,@;OPRA]:h"$G#HAA<^k89`9C5-3061W%a6Z&n$4WnM^`9VC7Ll@:@80?Nhc5YPSFM/I3<K(Nh4JRaMT25N1\1N"dHWllJthQDaHEH!Yc5u_a=^;3;TMd<Hk7;87tu?'V!&>H%!K=i\"Fgg>4B`;L0+o#5]Pb(7P<D*OF?b.O&gK;J9*Xt+8jV]SgkUif;HWcu@3cEBq^l>KnUaTS"ReaX\IbQK-9:!=op)rjag7Z&%7IqpS-GRWVeJD3IV1(&3\;7.<kbHU5>(1HYC9W(V#NccI!c",=F"nW^][1%=?:9ls$Gb/=_dPJ\_g[p@if:rAERoXF$E>NiFp%1q%J?f6:a!#?eB!A7kS7`n`_/Z7aWn]uSZ\JOsmh,K!A$>uRE2(la)@)c$C;N,qs"JGK]mN'V!H7;7U(ZTe`psE<cb>'Rd:VAthA`*:%$].";Zf6WRT5M&>#jPTV*(m@>d)L'K(Pi9?31b]uJg'tDq-/D'(/cO9qqOX'bTjCio+NSEmldM(,l*4T6TGM(A<`*5[HuGT_81[6%p;N-&fr@Og`c"!PA?0b0LSn3OMP%7>W2+A55#eo>UueKaK0`$141N0>_g&-cIQg2sD[3J!&r.?PO@jk'eB)t^.CEg8Tf"Je4ENq!%Q[N3=H?!;2,Y;PY6_HqUXo;r84]3!^*tIr$0Fo6'IkoB'_`VBBDVIG&Ij\MA0@4U.--6G=o:.mg[iBR(2m[t:5B_feVlj_0JgB[B%cD3/[G43'C>3%$tjet7I\E!!j\sC%>i+'<8Hd_/i6R'Ehb&dq^CbCEsZn%*H\Bub2Znf0FTf=G@hOQNF?c7"`'32oLa\S8KctXH.%3M'W!ORW%K?Na0g]+;)/^ET9-11'R*Y+B[*0QBN)<FWQ%N4j3l_p^aF_N%q8iQoAoH_cLY@2/r++N^rj3]+Oa9U1<WOtS+&,DF5I%o8oTX]b'u.;S:A0Vr-d^BLT.1!#.L/GV=T:"$QF)nq8&Jo$I0P-]]q94@&kW7"7rpiA=ho?6=ZAr;C'P'-?&FH%PF>JFojV=<:t_%7!'4o*`"+_`9S0ZRRa,3EDiBu4c9nd[&T'RG?Ej5AQhZhY,':hOq42@Lc/gPPo5[J,'e\_,:,JK\0)_VHrc+Q+)9r:Q@4sU:STp3%5$qQD&J&R),?ecD?_g"lQ)YQ`a[/DeidLWbP$_0FqUmQLY[Z'j/uD%U$s9`ceDMqp<"8I#"K[6S.99sk=hGo>cj<>0XB;C)G1-fb%C,Uk_THp\@(L]1S^'mP2V-8_3>4Ub@Bb!Ar#UC'SpsVMnT1#n;?cJgW6huceIX/cl!fpkgX7)[!+qb[8o;CCTs&\o`/_jlkr#r7P%8Na@nrD<]0gkMUWQp9Isc/?.FgI&%URTWcXMeCN3j3u?@2clTJn'g;e;5Il2"!>>#iYkMfWNRj@d0b5KC<*e`$#)5oBL]AsnBteP%SW`+OT:,uqU*9c(f)h+-"k/A^Ta:ELYYsH^5=n5slGZ.C.9]o-H3DpI,`EY&_dd,*Sb@n9)Z+9rUbq?K=a%sIl(H)<<ksV5!Ic4&%24GBR_/t2:]HiE'\@n71$%iA?;9XR[oH@ppM<&7`adSA?j?LC<&MlpH0dC^$aB)6jT^Lh/k$^NHn[5>qWVMJ=k@^Sg)'9GrplK$"%/EH4CiNc#R+tGc(=lIokOk'khSqq1$e4IgS/r`&X0Hoe&i5(9DT,&#Y(O84Z&)q^>Y`SICAp`cm6*AD:JsZJ0(NmiE=>AP">QoI[%DK8n.VP-&-qGN?RW``u<<sU#$.\f/QAQ$.QS,$X#@`H"M3hZ*VR4E2iBh!W</s_@V!OBu?Qoj74EP5;WO]C7`XmTTEm;EU2S#"W:%GoUAD#KiLUK?j?]dLqiA[3.g7]E(DSHZYk2XRGq;BA0T$F)[4'0?U=WPCR(aa5rj6'FJ.]"OTAg71CB2SuQK.7,OoqmXnXYmpX#l%Q[_(+e&SAi,g\Le6L4.bl/HD^$@;4c,*osh)`6-(1(,oS3m&rrJ.3K*D;qSD+_a543]Hqp;O8+p)#rE$AHa`>S$/oLk4H5rL#d;g%Cqm&Z^Sl[D.,696(t=Z*F[iiN'&^_]M$,H75Prn)OGOMTl\L(PaKf/Z$63bNE1[$!BNJ5^\JZ^p?9hZ&`b)ffZ:PV_F?(K/@!Tk3%L!B)8:_>::abt7e<jDnf2h5iI^j&RI?ulm*!(!seJB,XnN:;V2CkI&pRWR</%c)qC:2;EVSTH*f9,kg6+(A<K,4,D%bKY2Q6@K0G%gMUna!\WrE+Ej)*To]E`V]69]=\>F@G27s6(f%^HNFh\'+uBA+'2p%S.SBf][KAfV+Jh+TnD#sSTO\W#TfTmL#K:^a="bIgl_-BU%WeLm*P^5V)O%Gd9U+KE&%XJj!n'#:haGtldNTtb).hIB_\YelK8iP<,NV..]F?I"V<2#i+GSPbAEC'oIaai*R_)RsSCLkSE<FFI$%@aN11YpE=WIgQ&8e6Isf@fJj$H1A-Vk.?6>\0i+rYSOj&pUDSQ^\([;.sR,%Ju/70frj6rmKn&^/U%BeEDNgK9OkXaf\)j(fa0Oj%]W43Na^dd./eEX^4+U[D_d;8NA1+Ugi2H&Ir^V,5X/#]h>u,LH':>e=%K\dQbbH-sqbIBA0R:Y'iVpYYO!`<P%gI?!Qj6K)ZTuk7%^QYg!B\Wb_2Y,mgG3-^)og26P]3%g*KifSKmIeMbk+D(c7CpHf$2>>8jTIM6nSTflK-)gI>%tNp\?;=n].5"4)q":oOmBImrQ2Q0%qr<^3U8P%ar?CEb]>_>jW-dh'6#28\e:q%R[+s,\(,fEN3t;3QrU$Uq`:cI^n5nT<ReDH_"3CoFVp`.MZT[Ns-HgDL;$45Vs2Whq%>kU88\YJl?<WC+n<g_+B)phAbI=3&+GBsTl2_H9u:co-`77;BPj*C8.j%5DdrsLYP`d"tR-/*6k(qGJfDNZ+HIb`5HJW#V9!'gIu%O%X`mJYKp8N;LcrqG+O^#hbc,ieRk7`rn?G#n`J3@d]AeN/k+Dc+#2\(5X3Q1s8C6<ZltLKh..K@VSKc`GcEHTd[=IiaTt7"V433%bsiP9k>fT<JV65QP)C0CMJsOe!#W,"O)S'WFA$Qj!#&iFg+B(#$F2:\Kh>LeV=[,(;u3MEes&`#ZR/YO\@u3@=($l>D$iXrK@(n$%*u`4<r@ibjM!-Z-iFn+"OeX-87q/3nAOM3FC"?#+1jfQ'Bn;>l"HQ/a&WY3P5g*h)_@RE`WPf>[Q6dpg+LOU(#N)LlCkRVL#e1"o%+nu>bP:AVi!25V1UoC/s>6/:$>o&5b!/W+mN3G-nW9Lch(4ujHa8LbLT^TDs'B:q:&:^HeE"PBD850gB_Qdc^<@CIrg1dr'VGmsL%[K;7#KEslmP_R1UJ_4\l+AF/Yd0_"+f2/A:ghC/=6n(5>!\c(g1]oP%+P!cT[Z$(L*5gbki)cACojqB],dd%jQjX08fMYcTP6P*@%+f"RD7%`JITe_d#=pt"qQ>4B@kbG#.M6J6sbN'G^J2e7ZiE?p;'A8.-,XkEB8;^A>ZJ)HSAJGl!<#"as#_74A'+"gJ=cQM*`/`5M%9J&Sj+_]Yu)"+],!;[6O(o\$D)'.[dSo+rAbns\POQ+p585<*He[A("X-g7.oc[-J7B4-m"G21ZUZ_t:+<FTW8/N\8@tI*PL?+JQ%@GCo%iHT3*f#@4m!QJFti`U!8b#$Rh&J9DcPd$l9;h.][\Wht@r0_[V%?]Kt%@+Xdp'!0.71g,p"6IF^A->RJ!K@bWd4mJX:kn-?%.M6A$,pII\,]Z]^"h6P9=O7e;"+F]M?p?r-T`[\.KaOW<USq:J+ChKVJj/3[HZ6@#Q4W!e:B528bnHq(J16PePI?,id$04cTIYY+%)8iaB/n$_'L;aMGnUgBN%:aq3@_BLOnH\Wh0qQ82P$hFt[s3A%@MkOLUH)4"X:`&M+Kgqa&j7q=.(<YVHE&7kJ,sapQWaO1@2Mm]%.tAIu[4Es:.QXC/d#g'0MS**q/LOsR'<("h(?65A[i@A"^b!9""JPr4@F5W_4B*JK9E_>N@=WMF,asTe0s_Lk$ghF],pXm5(5+6e%$j9Zf:r8*;M+3ZdOOB7a&2KVd0r/=/>+k:t?CW&>F:5Z1JG_\K!.rI8=PCP`P+r%=@QiWNW!."]$8H8;Y_Ysc8`TsFR7oWO%$:jN%P>pZ_q@H,'^a9?(!i40WaQ''F!j08#cu9-u+\>KFRp:PK!<&]I'.C6kEJblNL"EtaFjct_#keMF!`._dQ.dt@'Zp8>K)HlKXNV"s%(c$?QC&!AbBb=i3/49gfI5.!%5Y?lf467Z?KdA].QcmH,F$XN'>"`S<!m'"Q=f7E*kR^`NI9&tYi?<JC_\A7lnd)6Y<lZ70$I]d^%\l&pC,pgnf+LOK!Z!&E4ZO02D5o#kMc>&i5>"Yi,5_b;1A\A.nAj?K/]+hZ<#8'&7AKmbfAL'WoV90,(,`':@TFqko+.arE`M4kO%K"XF+U(<1cSj<!#$0k??:Op6@_(5`t6.F9H&A`Ib8XRr[JV<hodTW[c$uD=VA4XMpZp:iF555UUFUZN+V-Og@-CPZAl[dk\8Z21l%BZ9N4Hpo=]$`8c2^oFfh`6gr(&q[s+;l'S8)CZUR1*)IJk@mP*4]m.%?=RGseta]`a3L>\FY$m^9CQ%.&Ptd9(7Z"D<s6YTq^?Is%RS9IC$p"^"Lk%GmBh5&.3"g3_["kOk*2%\<'F@:N&e[Y>*e<=m&4UD0S]qN#1fL!1_(2pT-:baN!!,YORY[s,d$VjamZq$V_.=8Z%851Ht9u[HULDBec8e<P@BI$;fC[k:i<CfY%`Y^9B&9m[H`TkMEL)K[mQ,Wp$ZS?"+./d)AObO2OJB,*U;C_qu5E?P5$n91eCnW">%$pge)*>tLYn+0NuNu_)7Vb%Y;bf2%O)*lc0_G=SM\OaV;pe0!L;9NE';+IPu0F$N)ZruGr#X)]8RaFhp-AG1o8iHdEbU>XldGrc5%(o&3?;G)K9Qu?@<(nO/OR?rn'\Hq8g^g_p!bmbLbV1:n'k-54C'ko_M0qnh`;C!1$,au1n85@r8P9OB_TJn6JaDls/(loO93EBP<%o;(Rm.(5,`2n8o[%a`6)P%^irUmB+CY,mciGm\\\i:d!&:QJtd-\b`X!;=m[?o2FmUa--q.I]<-+pCnS$no2eRMZHm*$u<G:CY1f%aO"L4:%SW8$n*5PN79hG>+u41j>(Qt7P0h`,mn`?VP:F`'92hf9Db#TgQpp300&uN3X'[oQT=XtZg$20_6CanfV"fbD\Zi7:<A`R%NW7iq7Qbao/Sq6.jmI,/jih@J7-'.pDenp`G`Nj9?@2&GEGs(uG^\b7q3V!(kbICh0X#q<?U_i][F/d)oQ1f>4[;,-dc&Q^+FIeE%KsnXmgn7u9,ORceR(?>",58hHf9237gD$KYh,_p-n'";NTkI>08Gs#l]drj^'c(l+UkY8##*#H^'kLY9n7iq7]lm(t.peA8?d^(/%Qc>MZ8pRbVVUs+]7bOKSFIkheV:h#[O-\%R\1/-R*Z;?Ig'Zeq6+GKdrcX[sT<PbbM`J,5#/?_2h;P6i#Z-bSRjK<HVFd/dBil&0%^H5im4ZV039p>GADOU=iq"+aL,N*GXe6;.;fce5([4qdDQsAZk5>;47[SN:eBi'q:/^+<L-ELi+j<HV,rA<t;c$l,Xm'BHhC@TaU%U)oW&;9>MJ5+)1O>DJtjlAh>3Metc3-^EEJ!9Yp`$H*o5#uYD/<$^=fpmAU-]KK<2g1rRYF:#"[D^hn$e<\oJ^n-/.C$ll^18O'8%l-O-H=nlc_XTnIJr&(&Aq+C(C^Ak/qff?BgGJgLb/!k98LO*b<EL4oNd:WQW>iQ<d9nu66h^//9JF*NhZd5N+?-F#Wfq:-<+$E1H%@h2nlP@\sm>5L1_`jLlt?+V\38CKiZC^\<XB<TCA9`J?q7=f;EEb;5oh@=m5f*\DbkASl_:)hEp-.]2FD#t(c"VPd?H[_$0lR"<,%hI,R%`5uq8)%>c\XcoLah^iO&H7;PN*NkmGk@BTgB%IK<383TT]'3;J)]c9/@q<H*NtDfX:#"[B5'Olt)OQ-=2LPXS^&h224R+Y:%4h_[i4kdG8ABUhC0#hFilfNTtWp?O)KEPU3\M40VA[ALoD>kf-"hN)=n!]TfhB^j-.;@K%%uMp!RN+o"e0&,@<`(Dlqcqtleu1"Y%%JQ;tHY5k9T&+nlX2rY*#Ga.4n#_p?C&4UV1&YtU$<jL@e.tPUM0f)<n$4/rcX)IQ@!jHd3?$tTU<Q`fCWDV4VJU+V?KR:]mg[L6%[[r"'H-^p3YeG5"-Q?n]"k)873H\N4I;2CIB(;RPdu\<g(CN,sjDOjF6568h",N;\C>+I71[^]K7q`&6>!]G7Jbc4?oc"L*B0Coc%-FJWrLefs%n0g/$C'(\`f#*?PoaS7AI2qN%H=U4Fl[r[jXloNp\NEF#J<T]drH=QqN[9T'^D1*H`i>JPL/mRiR36VQ!)`@Br>5.[%T=V@9"a)E-kqoS2`M'Q%T@haMJnasd9ner&IN/o#Ro'i2\m5!g^VDnDk&pGPJE]DI`WOmE^I8BU,piQpjLpr.;/1Sa(6I,NdE'ek%LB3Sk^5s09r3+o)HL(>*cu7tco_k#/@2n_'H'2RjK<c5A(ee75gPUKYo-/p_U%37=2H484>MEl-AtKNoViGnY_A7I2[q!fFQ519d%/&k2uE&0QH?ED?*A[WCp'774cfSamu@RE6*?EEfoP&+@^mNkMq=-3W2"e5A"kRMT&%THGCJd0c9Pr@L8RO9JEE90'FGL\V3T=]N4%-.blY0Pb:r*Xh-?Ip9.11KMK;FcT:gHh$!tcqNb^DMCpl4*&[])7i[QiP9^\U2QP_fJO\)8Em47!oL7GrO6#SmL9]8_Oc)tSNtA$%\8X2+2_;FC902eB@up+t*D3kPpQenP_C_6W*f)ZSG7]Y^3lPV,RBTuK%D0GlY?:JP$M`k&E!0W?gZfUc!U5\5hIj#S&8T/'2l$'A%j7iS%O6"(OYCHQC++F1YDh%cN07WcO^I(nP;ZEjSRkb?^s8Dnga=__W?6VZ6lA"F)%5W=_059"pr;$F1P+ZIH^Y2/qLm#OQqZ!bl%p]#WCdHaad/F)-mra/DGWa"NANFUXVgYD+dS(4clDUVZLFe$W+At[#$lO!CFff$(XUXXo'p:cKS!n$JqGD>MDi.XqUK`?U,+5\kB%b[tQhPd6U%9lKtd2\e^nVr['P@5tiDhmi\`fKdd]gVPOdC5F._o7Bn(9#1nKSlCgQ\_dU.iE3n2nnR+.b[ZSrV8L^urHI^]<UeQe%;jm1)"d0>7UG)=`+!C:n]EWdrBV0qHd>Flk@p=$mgV'[J\'e%o*!Or85aPA!p+Q<>(j+pi_pB4,Wr5:k:JZ%#40W;W*(>XLd&q?r%(9ER$VAI=,Z&"Is0Td@NLcudMq)/YR^)3s7cUBe<,pYAGWBGff%"I9kFSqh`cTWpVjMp`\nKVJ'W,ei4\$h+J6[[4dQN05?":4XF%[OaM4b1972=&<iG6IY^pYq@LPG[1h"+D'lM`CNY7WcCL@<g9\be2AT'kd`$1oQqZE*33;WfE/ecoU>%K-VeII4\(0HaAt_YCO+G%%eitW#YdH_/.l^p;V/e<_rWUq1p/)2cL/r61!NZ[:DP2Q`#F9$>/#YSQIB*H2>K&_j7.*MC)_%=Rbj;du(.jWpBJ65eQH.Vsp21a^%U;;<V8D)e3PIn5kZmoMs!o^ftOF>p+mneDg`%G_S=;7)nd38-GFJeD70?N(R^;MRr)_QS4.b(m:9*r0GHoZ^IN'I52T`sQhDR$U8%MS&<e^cpl$rm`prgQO?h[I.'#0ckZDc9)No[Qf#i?H:DAUc5o,`#ZH3Z"5WkcsED(IY3nCp5sX('5L2qf^l=ISim?U88`0_\#?Ql%i1$B^?FeQ,i<G$+fbWSufeDQ8Ar>,UeDpLg2h0H@OPWW3F?SMQ4uA:-\88S^K=8?]Y4\B9=[\XM%9k30&s=RmYcad3Y6jNP)qMc:%#hm":**H<KCA4r_[Y6S3cK4s&;ccrSjpH%T]HP$&k"FlTic^9g"%Vt+d]$?>,@RucEdOG0THSTS3bGGGC5N1uT?E_@g(]78036J)%n,-SL,&jTfp#rkp5#'e/C#dKs^`&Be5_4KWbJ=,=g$A;jP.D[$9t+-`o4T4=PO0sm6I?IIkH/[E+%</#KcA:m\j"E3BBjdt$mLhg%PP[WmBC+?E`EcDqBYU%`9PpQEoD&KWPZ5DA0Y&t6T35R?E1V;H_KHnLcfRFS[g\lTPo<(<0kqX(4>/i]#Hn*0]_?*i-Qu>B]]m+f%q"3G9Y#QEmRW\kE*DWHr>=EmG4WG1Y"7Rg+ge1""$YYRME#A@4'>8JFglLb@!o0@hX8Xn`R-rXmo$*p`6i4BgmALQr5GG*lKD&+?%2C--\BK!P\V?XS(57cHXBj'O[QW"Zt#"]ZeeZHjTV7hqh&Tu2giH48UM:]*\nQrFqHk3tr]#(jXT+&7Q1Gmh"Ogu9VFO(bb!XR;k%aU9/pQN9IVoNVj$il`1_.A$>t#$Z3`)q\AT.R<BXhUsO(@fRgVQW.Wk]i!_RnVV9QI8aSG+fL`.T#Lc.kagI7BlWHld^-5T?K"WU%&4"n8@l:HTJ7;+/QYMMu1'?"-j*:%sMD``!iJSOZfD3X#qe]VrhPR[Y2Y8IZ*k@n9dcFI5O^;@`OEN.W,iKQ*+;*-W'e<Yu^n"Uo%Bn2[2+hQXYlp2pu/9d7,a)c`k@Ibnu*H65g6\55sEOL,9o;A+IN'%9%!dCEV%L:/e7Y@[%d7H]9,Jn1j3fue\mE]^*kB&o8QU$St%_.)XGl_e8+b>u3`.YX?T&k6gDqnP]-AeFeQF3Qt/`):ZM,s#2/a:\6:EEE4C98m)YB:k'o6AU[?@N6.?a\-oc]qX,mSJ2iE`C6[F%g:qN-[A8_B7>35oKU<bH+CZ<+0NFh]kUCl%VO@ob]lp@S``m2]B91p0KGb`g`u$V`VC:P3Z&2laFqRnLA]Y;2^CaRe4)EP^`k^#F%Wl>4>7>AC@3QFpN&ih]OrlUW+m=PZUj0'/rDrKEfR42flKb-erP5'[J?g2+Gh,X8$*NS@hdm3[YTYq]<Oh,G_k;U:unlILFq^WD6%D#BQr#%mcJb^j1h:$JsL$Zqe%d#1be'3Mh^K$FmX^bV8KT&GGk@!NCUOXEW'cYqP6:13<Na-Hk<nc+l90!a%6,6PS%(tlbT8O2:=%7%pSbM5Vd5q3LPP!("g`d`!`JTs.jII*I27YbX&.B!:?n><u`OC2O7u\rs0?,Sj/PTY`6"Q:HH8lV0>i=Ifi\p:6^2Eao29@dH+1%V(\B.iNS7Z8E-kL;NEGhKkRuAB4RX;QS8ODX10$E%LXR#88&Qgi39Rg-tS,EGD*k33\`AuPf!P[V1W'jD.FWPONJgtbU8<dTq6f*%@[PM@*g'oSSB-k?8L(KV$r__&oSNjO*uI'9RK:E9Glf`&bHhIS8dc86b1I!LOP:$lqlI]Pi#-;5(1:@<XuhbGY($Yf^g7l<`4!oP%a%ui\K8"H+;cF&S!>p;t+$<EaOuq?j#<_f4\:A/09D^ii^r1u\[[6McXqFqe`l/MLYKVY;IjK"sE`94)d=fJ32FI%G"h'JL#NR#.%#tmelZ7c\TKY\iHYUDBN9>D_un`tVtAHiN(BC5I/QnKA@7<J5p]cb)LWbKidmGsj9k0[QCYJl$%I6(u@f]n<YDBI(!_-.PLU*E^f%>LuXLato)R)\u@?_T8fm)SOn1!/,_t>:q6"Pc.-(gi%saVQCc/_ru9fZo9F+79?Rf\'BCl@UX'(as7aX87KES0)#Em0h,UiQWB\K%/3'uTA8i#OVq6KD]&9e,SL9e$c901S8Iip,;CQWg-j-Ruj072!&r";/AJCHE;VOcO)(k\4"H8apS1#qfe9n7;.4f0ISAGo6i!^B>%].mF#Hbs1Ta-(VSMIVLZ_YJp;9FR3hX/^%TjpW"H;,HY6_89-W]#e[q(5UdM%L1)VBb["o0N^f,SXi5'p:de5UkDQGb)@g?]&MU=%e.lmtU98aAKt<Fo)[j^uUTUt/8=;!-,%[pQmL+*4f%b[dY!h<8\Y>Yd*>I<ger#b9AYo-#"">aC*Sjf>9("hj.m/-jd2$d8*@#-l%YG:ifVj(\V";\%p^GY&i0r:tiehbH@Cd"PpUod/,8mB?e_]AW4fVfE"Q:/osr!C@M`Wl_,RO^*n*-*[S5U[g)5mbpjOVfTo(Qk7d%^;iWQ/l#/]c2*+%9#KTC`)erQjf=?RU6n;6paXocVW:,m%5GT>hR?&k$I!hqq98nfj"gD]"O'-X0OhZ_K8J=204(>YTO'_"HY:]Q%J6[:K)7bE2r:T*c$80t^h"Mje+P0$VI!e_P04#A"ZeVe2K_;IZQZ5?JZm6Gs81YX?p=r!lQXe't0.nZOMFSiDPsE>M&c%mn8g%AQ%Y!L*4?s?(4b2<g-[Y+XfhF;71+YkZ/E]Z7Xp[NU2VdD3&m?,!7!T3t5@T[A#BHQuXgrFKF&*QqVe#3!80t9XB384"RI^9I^???EW%0]BkT63-&TV&<@U5/qoPJWVBHF0/6*IQ\p&l'>Q-DqP'5(+$iC-ub+<]t:_;DR:QUNA1RNS&4SaV3W/HW2[V>lNk4[W4&lO#t'))%]RSREX0g[QQgT:T"V^ldCNk^02;)i&lqnc)d)_I/.sDBjOq9%A#g`DEOYDqc,WJ6*.t,KM&:4jXAUnlkrCDX>cI/lZBk5.CZ9-lC%fAHB>@pad@*[KHfG4!I#S",G>8<`_,dB:Q`p$9Q)Q2l'c;YLdcjMFIQ.H/'[$dt=tKV[ZqiWC0@]6s[UQDHfECp3;_`YGj28mRZs%AUt7q`/U<;7fYNoqV6b4-_dtQWpRKt%@qXU+D&!X^JbQ?=%EC0]R_6A5YZWdb/Qna7"0t*f[tirZ0.;k>k"jl/>@9<lri(3RW_i=%YqZHs,]'ZE7br09#Xk0oAf,W9W05)'Q_)r/b,,\,<=XU*qRqr.-9e4*F`(@I39`%8']?FjSd"5r@"oHX0N`$N1L+k6*?<h%6"Han%>\^><\0^/9Z]*+'"<2'X_V[A^\&SA;*)A/5hm'*RXat]Gb72;VMB&4ePdS/fM]t0@Ujmg64k/)E"1o-dn<l!oKkPa^fAND5KJ]f@%:6\\Ck%'/o@N,q8`-W]C'+@R'3eT!O=;UNEC[Z</oW%h;1=I5*mYK#P9Bi6q3P#k*U6_aGDc?]1Al$;n5r6Jk,Y+.14GEQG3]A0+%/T[4#+fQ-POr>&m0S`p20h/Lq/0c)ed4tnoJpAI`-N]J5fq7#fSc2A<1oc/(O.%aLdI*@8SO/KuF#kML2R\dd^,tImit7]Cf#FKF%'5N6J^=R23'O:42kOn(qILj1L%$O]0Q3^19#&:nRH1J=,P.Ts\*05&e;CUo@C+@QNLjngQRrLtSiuYM^\=OWAOqX_8(D,;VdJLN`%4[5"T/["31&1J,0U1]IE%#H^)T/jmp,0&c870co2WiGn49F1\C0lNa$+:-2FW0Y"?7g3Yb]5;(hMLXRM8&CPp$DXJ)MX1?"eg$JY%N8'BB<a9NU_nnV>>Dq)?kg)Dk*F3:7mN0NUUrUZ00MRjnK,n:QOA]+8<=\A1AldXC@laT[n@KlGQ)R`6q7GW'Cim<*q;+G#QMg/S%6a1QE#i/[)$;)QML(f<>,;R2rnOTM#OYi<QRZMqu1hsQ+<dKnS?-a3QP"?jPmhsR4\W(t7T(oVh"N*X;`ko%g_bruf:,!O_U4.D;%>Lu[p#,65A\ZfV2qCBi3iM+gLW5B$NQ$WZNn?%BObog6oIIU8f<@IZ`]8=MWCXIh\QW;7C6;@pb7E-FRGuYa^orrW/;)G(NOXW?$%N0%KNJqX:P5!/,0aXKOr_fZ2.9q[/r6>b%=(HJ`P'LD"^M>#^nLXiM_/Y60MbI`mY4<+Vgp[QMdrV\1HE@9"8)Omm:o_7u7Iq<hu%?)"mV7Fue5f0q'4n5$ZI\GGU#VJUujc,Gn-L>h#F'&+R>gL)N_FZj4*<rKb86ild%[uI-+4`rF)g]/OI,(/\hE<A]HDa[<FDC(]V%O2g/$d/2M9#c%k0W3A#OZ-cW>d^^CN5'NAAl;g@\VNkRn*.;'33[0QJX0j?UoHp\m=i7D-NdGhL9hVoT!b*=+0_\f28:%V&OE2OT%[kWE)c87n1g?<^>;GA10*BB)4bR!R5X6]3oUK/Ip!XlUu6&$B9juZsPE4s1GY2#3(kXI*p*$%3Hq1)Vb<)*\B,Q8cA?m"A5'&&:S%Hg^0pY[+74a818@!hmru,(RM$4rJB$E754c7rQE7h):'VG`N(rrV5\K_X)6\Xb'6S*SmAId^P^kpNkM7Vc'=9"6ljYW_4F8P+45W%o/E0=[AJ1hOd(o%+QuhW33b&[TA!)B>C8Ia"3X5pfLS$).pR8!lcRpbl,gM?-_d5shl1`%:;")3"5E*8@nMS1)$NA<ZR-r/NEIf&%4UXhg>jVne%>V.BA#/"mARq[p`52=OX+Y@#XrV&SRM+)\8Gn$*!<Wa1/TLWu6f=.FSXI87XA-p4asT'\3R:e##fteFn.C^Z]LebQ%AhoR/co.0H3Hi^lOgWD0!(:)]#Uj9$R\\FU9:9I`]><)5-hcjI8:#*CEb&e:(O>f<@JeVeDH#;2:#j3uk0T"(1T"&MBQdh]3g+=:%^s)N.2-mP#gD?[5lc&QdX4kY'YIE;($h%H.I5>KDDd[27i!+iSYLp83cM=iVpMsQm"Ud`dUnS<Y\Et5;fY.ZuKjG#QX^Wq_btORM%$lW;>5>17:RdD%bfY29&mg>OqUe\?O7Wr=sGQ4,-OKa-R8S;^EB)>WIJR7%'`Rg27,oaU99Dd;Gn_7r<('rqZO>nj4F5n'.fq3*Y%^38q`phat/o[C#Pb_0A.Opie:]c!pq/WTN1[jDI@(3,:DfEDnB?,k*mCQE.gEV?b&m8nI1\$id?GWBtPQdDX0$4=\pL0Yp1fEGlA%?0b,7EPl[DYAOa?0^RMX"O#K&CIjpqZ=*u+<g+DE))9#]0[iQ)7*LTODR/5MO^jYe@+0A%<,/A-E5Si$-.4&5[WQ#qLLJg,I`5#>%$n(Yl,f?eD(?I7M2BlZn2s^SP__,G.fJTEE\RC9)Gqkm!]-c3_6TX\m1!hAkh5R!p/=iJc[B)=_Z?Ei4OKe'-2M?tpT:]ZGD+miY%\QstNCGX^f%4&6k+*QJ[(l4LF]&qi_Zg0:ejf-A)$RG)M^soN&RW:,V[\e0(ACb25qOPep=*V#Rf;>cZP$-BJ8\ME4(SbGO>t3&>%HQ0R5Z`\4,^$9=_E<6X-1>;9*Ct\2f\80tQ]<7"4@imuT=5?AUf``#c+_,!7TdJU:[+]1TKGF7#2DQI$MX2RH$&@<?K,+OV75jKT%Mk6)L72eQG#M.ro7YHC9L0`[p;gjg;f/<G?(j:q86Ra]Fm#Y?"4HO$XiG3NF-,U4d3Y:#Ee1_n/$p4)&#Br)mn4s=6$,`nr9u8Kj%537obCtJ2Dm5[di4Om*1lN.C)/n8ABq3#^/%LpK<d*g'C>INj:d$-WHFZoolI-JTiJ6kk.?c&rR,S"S0goa"=/,Q'tpHZ%M&EO3:%7^hW54_5nN%N!pna`^rZbcV>tcIN"[pQP!UdEGr4a8;engKpo&;[6a_+eI0&ea,>=R?"GSlQC,fUec/>?t%XjAp3"Wq"8;g?V74f%:$nB`pF,-\J`nqAKOO%G1@,&u_i>YOSIIZ!6demNL8A,U.HS6_Kf>*tm%Vg7faTm$bd(`Okt%*\,RGJ2ag)jc*e_V#*R_LQNLa0p%Qno=NB![Jsl<^d_L=)?_<)^hu>BUl=b:[:6f`;]QKirSoWD=gS2)qC9^CSNUD&4J@DVfQc&3D-k>Z2ge+qWJ>HaD7RDf8$F3bVJ'%VdNi2WcTSGa40Le\<`B=T`f823l_q#RrOkB;r((UV8kAsOdscAB1Rg0n<+6;"\>htN_Dfb?Kk@&bF@Z_p*h:<bcqYD:6itW$8L8n%5aWh6&c&"8pJGZtdNp$$8K3H!/Hb(FRWX[Z-eM1kf1(S*3/@5:Q6L%t*jH(edG\ofP=jfi!HOTr2B.Q'O>qbG2MEmim-;oQ?&P[r%7=4gba>:6Y+SQe/8=pcGSkAYegj<7lN%D67AW0o6QfjMdp8`3Gg]L67dilb44m!#Y.F?2tbhnnp,Nh7".A:Ep,9WnXo[ts>-pCE8%6jj"=0bo%Tb$/+r_h)Q,k#k/s!ub"/?Y6)h\`ioKEqPcEX-Ld-$2f\h6@q-1ic6,U6&bW(KL#'s^$AoO#30sL3YMHP["kZ"N&B-U%!6BsOT0niGC2Qe'oAU&!"j.Me9\1>>Rt#3[G%a#OK9D<Bd:Bi^KRO*.djV2=n*J5J]NE`U6m3nDF)MPI!Z=sUFnkei2&k%%QVCAV%*MqgPa4E]\P^JZK-f8ahjL:k!Q/%k2r,9DXHEMUno-q.V.]kX%Bfs.OD[o1G2[NFN%;R08_i<,*IX>&C<UL<"=iGH]g`%A.///Iq%rsmnF,L3l?6od1G`p<+j+;Ok?VuIZ6;U'D=V/4kEF-@0ugq6F-3h;jHWQRT@C\+ee`H4Zsn?F96l<Q`HH5DrGn(M#==*J'T2W:[X%K=QJeGfDabTcWVo1@G99k!NP=ds>1gDe\uNpPaF=L*3-?q:;F^I[M'0Qej4&c/_E7mh2MQ4!9L'%^-bap0=M6%D9V`AW)kSiat%8%>l[X5F3'_m!.<;LlIVW@Ck(N8:d+oNTYD+MT$gVj^+(XM.JYs,a)t$9L8,H(%.Gs'Eg71IX4F&\F0)'hLhjTo1:M$gZjg8\2Z$`3%F%q>@!s2tLH)]eg1V(4@0X=>@<766o#g=R2kD>$(I$.VcZGjSF,g\?l?'S#:P6ht#3%,9T,`lMTX&PN0!H!gn_=7Y=kbZ^.UF1hj%fFB;"`R4!Wh6^&eA'Fl7:a5[h9-F+Q[jViKV.%H4$j.QO\Q9Qb9=*mG@/qh*DC`)Y/h;.',_08!G[HFRRQ>K4o=PD+;o3XU!dV&_%(3=Db.s4^K36Ep!+mc['ic60G]qHa#A7.*>&H2rg.Am%@7<D>UdnS+pK\r&"U.^_Yls`KS*_[6B0/+Dsc]":&M"CsJ,C1&d..B>#%9c59TW[U:cG.f,/GWLScj'i@J"4N*DEPgqpGN6]=("-)Vc_^E0;/DJUR'mQn?BBQWJ.B9e'(>--FV,I>N$+h@/EpR<iW<!gZsp;9%BW.YM+T"j)&dJ0C(@sS81`5)(m8q;LRXin(p`kf>g&7/\&hl1R;CQ%dRSP1Pjto+AHBohV<Xh10gI"-:&2u;+6j7Ut6_JV@Z-N6l%Kl2m>L,qE$X93H`,V[mNgsMIc,tT?;c`&TK0a\<uKf?o?4lb&sFq,_n[C:a%DTU4`W<\&C3Ej"RMZF>q#\Tu=24(V:ZTGdPW%[5l%RlNECKV?(b)a#2(&%JWm:HA\J5E#7NYq6tNn,1duKW/1\ql:NVE\]iQ;R<^OC!U3E5GJq`oeH,/.hLJahu-YGFS&rn0=/]oi@hlC%h#\1]f?_5-gE5I3)Z!N!;ggib/3,:cILTG#M]h6p?QLg3Bk@nK3fkCMN^?HI)2rkCOcSa2aFopa"Ku$V78,qodano3[ua68@uZLp%?@)>=&p!EG6'bWkh];FO,InPXTu::l:5/&g2(C@,qAbSB(5[>gpIH@`a51+1(.BD8Lt2+FZaY.?;h>WGUl2lI.8*1JVE=sYmi^)a%T!9`T=c_HT0$"-IMn7`5TqqCSkojTZ:r4B]k8Ou^b-XBa/4jW>*^];gY*VA+/@e8SM2.058Ilt+pA)sX*"O36"ISjl:4EP[O21**%j;O,mEEl-^-j_.3PU&p9Pk[nmP'Wp!I0mG3j<IHZ@\;O7ot-QP-'QAA0-N-%';K@S&:<gWH_NJG.'Z:$*O9=<]p8ZZ6h(epB,0r/%R!0gI6FOYh/S$MCD7(j"]5p)hbgZoX[tf>>\M9_td'TBl%(Qnn9QEpW%%5jnaD6h4)D^cbR$e)&\F_Xh8NDB5>t+?_3g*f::8R$N%A'[d\J22W73Fp<*,-N.+%3NUKiiaL].g\&&oGVbm9&d#tHWCc/%6<LR4aWZp[68!cQp5]Z=Vqe2km/8me.=K#LMTi<rj`<@QC!*A%S^N\rA&sh!j@PCU93RJkO!1F&,S!8m/K[%1"90C[PU(;iOCfc#pQ1dg5a.2KHcXg$P/Q6F:8MjM81$>gRQcLcr^KWqIh(.QP5'+>%SnoST,uRXZfL8OJ^1/^>K^>'!f!4D;E$S.X_DK#\fAnq?@VJ6-$@`XJQ-pI64XnMMc?jsO3T]FCbh%fd5<L+rM7hJ&B3I+bOKfV,%ViIMf6]Uj(R&si"-Pj:A.r>N0:m?it=@I.64'tAs8"UOe)3X`LgPB!k50*TE>K5:=V=_I]W6(.VmD*hH]dBAjk]b7Y[jk!q?`^!R%cFlB!/GV:sW3o]hHc#\\A5=g#Y9MjKBB,(TOXU>`)i$P5g`i5=^PNr:`&DP:Ia"Y%M&`@0<Eu7F,U20k\*$3<PK67O&:5&#QIL#'%&imO90Ddf):EiH?,:d>$,"G@odQ6tB^g`NZGWlC\&K+nhCHGlkDJ?*(Mo]T@i)6R*/c*eDQt`:fH`L;HNI\THZPhiL!D@76HsM"Q%%XSkW3AM.8@W*H3L[/NT^POM@2Ib<Ja5]>D@EGSJ1$#86O!0jfa*6l)jI)I#*^fWZqd[_(X]RQ;UrSQqWCM""V4*\q?;98Ma,kBB%oeGN@I+@D;[<&ctUA'$?\IU2uO!$q%p'>^,^-.(<]5N`Q8#,G`jQIF&6-`cD8!'oaK`i/!ae(lE)"2N'`M2]Z4G-=KfCp8W6,$R[%F%m;gjum@\+=D0VK[ZP]b)>&sO!%)iN@-rBm#XALm"n77n2qs#V=*#pa59.EEPrn\rW\4$,PD92#pB>0k9$rFOBnLKN^`XRJ*f3E%4b6aS5MsNBS)beJ?&b&Fq*UfrhF]+A["5+i\HKJ2"7Y@p).N#qV,*"?;NOb)`g7D7JpF$u&;<:Mo"6,s-ts^A,dZHs+7FJ$Z1"-Z%jL:+(HCC5Ed/Q!gT)k*-"@MG[PD.feb[l>F%:i?9XoTLHdRbG4Z[``GAHq5+#FR%%!'F1NL7!sCfiF=o+RpJs',![3BgMmj/0SqQ%*I_&aG=R>+@f%;:!Zc%\+_0*eH;1s0:YnrDC%TdI9\rV6)M52D41P6SHd)9^lNbl[gU/s_XCK?X.G'b0+`TZ50YO%\U*53@gt+13%m3GlO-nSca%4H%3Sk%0)L6b$9-C9p#Q$4A=-3M[T@obOsM;C8P93iR+H82r^W2W(';Io$^fX55i]U"d:nr:QaN*XJ#2RkU;[6s,R%jF&H^9<P3@'t&upNZ[+b8CpZ<QqKGF1>GP-Z&V^^YL8\uDuc_TTG$CG"DTh-QiTgr(B4')90H9m?K0`CHXJj+fur)=8N;eUI)L]o%EiQGm]1F1m!Ji!7%8HuZ3GUEGK(Q9=8@>`9!XW1"_T3HGD,)hI-?)6=SF;9ODUB+IbW%NdYq`+O\-Xr9qRqr.-9a?cN<%k="Nn[m%%nO>>@#,sS%u@_or54=<J+?Uk(\M<YW8pk,7!-I*d+"mDQ=L`Ad\-fd<Ag.?UJlRA2O&3%F,967BF\9D#?!(iU^i@L)+".I^t[HI%A'CS.=A=$nfiX)7lIPm>^7(_e:Yc:]WF$VpE<bA+GV9LaI@oq5mpm\P0HajkE\@HL=EOA1l.igL?,LK!WA4$?=DRJ3:AGfW2YG=8%d.G]uZp6F9k=1$IY7YU?2?Db/:\pTf?W3_caiIHH=[k5:ONi@'nKGYgN15sN9\`GG>\7(DM\f7S%,Wc%Jfu5%L7IcGqI!#r7!i*_%;_sa$onb2gbS:?1*[O2>qAc)u_O"mOpCZNT52t4JQX,e5'F`<bEV1S_s2p_o0!JfVK6.QuJKULf>]*7b*2U)1h)4AL4Fn<i&Fkh=%)(&&>6@6d.AMUUcRM1R_%8T!%n"QXU$AlHC]"LamIdcSm_N6I'.M/i3oM?A,NNYkOKtUhV]6G_/0\h?B)5W'-T5pK-&tj!;r5t%%%Nlu'eG[7?s@@!epDN=9C#rlX>aqC/4'"b8!?mR'mJmm#@#N*j$(dk(n_br?sL$qWA!$kh'&6+A%`Ri8/WWo6b'5F"OS-$Cfh/eBW%gbK&0=PO]FdpaKS32NI^jO*a`DjG?KhTK$_Y`QrjJq5He5(ruYTo3h@F@%"h#S!9,*sq9(C`a5M*r9&E@L!r)Elm),;$nK/[EBKM%Mr+htmq%Fb,\n%;e6Dq+4_fl`=P'KGQjLM_UuW:6>FZc#A8/(B]UFogo%;?N.Pe8r*(c(Q$$D$OoCKmk&`NN09`%QE(D7\sm?o.2%SIpb#3"^W.j*_WiWi/@3oL$;JH\CZ)Ad5M9:4^gV#Q[cm-YX7nGEG-kR5IFsiaER%cOi/=j$S]O8V?;##N]U<p2N3$&RJu'[7"b#%&n?LZQE<DKHe#X$-ri.hC=JIZk)W2,C/^<efG@5u8u%/g&`9V=n9sm1nW@kYQCBe`<7N2>nb2E#EjR>kP[U@Vga=q%p#VJlML)0W%5ZY'W[Qk_a.LhO].]^rl8`M]s)BK0f(:6#dlqPdfg=0EiH`,G=/[Su\4BYbY`JMJNqK"t[OR_A#-(L=rO<]]MNAs"LSQJ67L7@_u%9CkO!_,dJ1Vq^LX\tjbGpgXigQGIYM8dK?oa,6Z57/$'f*'4o\_,B[+7&malL&o^TdjgTDLu7$78T0n@&.a==T*RtlG6pZd-c(d>%$7QKBr,^.bKWba@G6nqjY2(6[32N^GEYj-)K2''Ma-DjmfOHs$b]6M>ijSbjor[=TC2+Hq)b"n*]h*8a`Z'A>Afo`e\/c],^HaT0%+W*`eFH1p*Ka9ft:tWJto`WAT<^/\dkb#(7]G.M:DTs3?Ba_krc=K*Y@iKr3`/q,kf$+l\OH4>2XKe\5+tb0Hin_=U>[/aXAJGNb%bJJ!SmNei'TIiW9UY`Z5<3EVX2phd,d`;7*cVS#ZLPs-%0;Q/R7I2bhN*9`+j;%5&8k)q6A%[0=[hPQ5;Za-KkQjQhFE%0_VVOO4%_l94dh:g5\edM\ro2lYVjmDc*h0TqE3Y"gsF<o)s"l'J*"OnC,f_7tR"XY,BU6N]3GoI`C%W5[:THdmfp1*JIB<,G[0!_cM4)=]B%@4LA[CA't:bg9cW+6UlFHL83kpmKoZ-p'T:`R"rTn/?WuOQ7u%be/WKd>2u=_sq6EV6C"pD2A7=.9,E>RkF.2`8;X-l]C5j?mYP\%WR3BtHL]PqZc*af?[.:mOF"*]P^.M,L>D9qAHArBbJtlHDtI\(a8W""jiEO\jhM&JdqYW!if]-oq1e6)7/!Y,cRbb5p(*K@/rKFs%[&<"VLo9?*R&8t19bQ)fo's^.oIfRp=dT&(8M1'9b>F.'<u&tncH@oq5JdjEhd$:?,tC50C,^sjXYo2_i[pW+6&f13&/=dOC8kpm%(\9=I[]Ch!6Sf8RZR*hK)uqfS[cZ:/s#"5dBB0%n`J-s\/r!e=7ZN.XA<riJ<:JBn&C!5<#s!MMbDXTo\2p$V,Cr9#ce$VVK6#6,%1J;47Kc.G6PV6W^YfQL%OA#T9j*_`R:pA&uF<#hle?u=_:)F9e6MMi<Ph[lhU!*%YP-CZD>j50d5YoD9\Y.^0P&VbcPAqja8G6(,%iacPrNBT<_OUi7a1grG7=@t0oC5*]l5hbG]f]@YL$<9)S2)[omdrAoKSbmXR\X*tSkc:gL;]+2%lti:Wji<)B3EA,j9h3"bh]sNC%()lmeQR(Tn)2YJW1"#s?12kU;B*a)Wk=c/1pW-q9;+gc2G(BbV^@ZOMc,bJ88N=1b9E6N=!`<&EKR!-Bi+Gd+r_][e1'YkB_&4sQ%SO7sB:6(fEA!+m0[D_OYeH:qGMFR#f+DOl"i%$;t!R[trS[pR))P.3$@*$[DE6r\G5W#sU-fs:I8O0DE=t.N#\jo**9U)/06tTZ)%$q<ukD8:PYG#qirJZ-7T3a#3D<rRLOda<[%!DgfB&@`(AL.r!-91YSuN_)^#`>R%!l:_%t,K'Vr#N(ITSVgdm\=u,2#Eb^W0>kmA%6o/j/b`:4&Y3n9PVnUHF&,"UmVGjJk;+IIap"<hO2'L#kRl*KRAE:8`Xj$CXaH<\m(AS!!cYMfsQ5Y=!`>>q(?L!i6;HKe"U<*N^%T9GnHIk/1aJXI=$hFZ8iY:#$GW]birP('oU)i1EO8A4[q*#Le0Oip]DY]6PR"D*6'ZLGFP>h*(!pJe>X>t]SYP%Rc";fTnN=_OV@%jUeOWo4>!sHc5V]WCK*^N9A;JPlq@1&t=9k9AI0o+g5R&M%*1:bd8lr-K3>AIpMik9Cc&OqUcL50aYlf$D_nl,mhU5Yc$.=p*:Wn%/j=A,8N=LNoL,RF?K6Je43Tho#O%-[KP6)%@oo"cKB&P%p4=RK&E=4NlB;'FPAgNLa$,s)O`DR<'d^V1p5/jL26>VO4J;qQ!>b^3%.6%<!%bFs!>4-L0huFs9<VI1IkhJUuY,1&!S+EOgeu0Q"%A4A"a&.M^PpsRAmRGc"8=VLSe)VH,_lN\**K&0gVEebD!91idO"J$m%'u8j[-Cs8,57ils$d@%:?o7d.?_fL72(dif1@a:bV#'g`[iOg/]>;dmQ0DF1%ZE?iT-m)l".o'IOtZluk;q)["?"CD&Q6b0J7"=K%7.P6.mi5DMZ,YD"W7FH(G<Y^5K48*HQ3p<'"W_%6NM3CJ+aD4COYnIG%@L1jbGYp$3f&0g#o]r0V/C^*fog7RR7l#.B^uV8+m(HM%mfAORR@8LJ+eF'+0IG\-qp'!O%_iIrMt)a.1U4-8lB3l""7UW^Ojk/&Nbk04Tb""iW=_)IZ8N>'>aN6XlN/D9\IsO&+4j_chcZC4%>;k.,L,\(RVfPe9V>J`p#oPJ#945b^5u$1js0DMD,n_T.$ei-Dj^+)8K&2G6A`*h>\OHZ/Y"N0BFhrUZisH44DXZVQc@F"S3Oa+S%T=]4J$*MJ+bbkOMjLJaV&n/9*l[!P"A(62+W!'R435mI',IsMBq:+bL>h,S$6UZJEG%FJ2NHc`-"WGe5O^p3MB!/1o8FV<lr2k=c%FQ:,pm!D(>/_%n%(HaY;.1iIC3YH8<KIP`:23jbRCp<)g9AQ+O#[_L1o.@sKr/#kY&VuS+!]&=G.an&<]]$'M4/G6Rm%qiqa,r&u%N:)\ie5.bW!:;(W]J/9ToiqijFIMhs!\siqEd[-?$tFP/-a@.F![tGa*o36]dpkoV#`^9X&]%Oigj-kV6jZ)$%i:&E?MWDo9IRM>%c5>108p7n()ZO%T8BB+2ZIAr*ZPp*$(W[IKH/t><j,b$9L27k#];<p,]Iq,6Qu@Y.N2Ag-+D('+V^?oQ`E,AIaiPtr'.cW2^b>hW%ogj(QcBZR>DIWgZ=:W2M/1C+G*/NIF^G!P;:BaO9=N4@tqu=g+/^sUIj9"oKFI32VQ'tAAD4qkd$1XL8KIu.*IjWCFE<&i\7$$5G%XctSF%V16aWJAJdfdlHuR0/S9*(tdZQnrq!V?S9,aB^#PEEE_*ZsSS7Ef!\>cW`"^/M+r^`NTUE;^^&"p\T=K]mn/)@]IrkV*$9C%DN"ZpAKbK.pE;]n1^sNpqFQM^+[7^D#A<mkbJe1E;TKZ9;5FoBbSuKRHs:o2=X)#7*fA?1q1*9>5i"Nik(.dB'47#B^j%;$ULqf4%KU?]AJET8p,j(=jEk.&l&F@:**_3qFaoG6mrRD-%<K3ZE\Mk/\2G%;BH\40rX>G=NT-*\C0af^.4crEt#!;_6X(nu(J0SKoJ0SLf%\);dori!Pj)#!HLE,o-2M]sLpY2g5T#rpdRhQ.?EYs-/a#6X%R7/,P]T>f:fH[tapQOU>GlAq;-:e3^)XN+RV4:1L7;1B%;iK8?S%U6I;Dc+fC&AVPYAbeGkSQ>19fh!WeNrBCp6r;1tl&e;VY\-h8RRHG,"asFpC0d%/D`L*,$;=3u@a+;'4b_k<^jErRCY4ZjnLn`F$%Rt5u7$u`a8k.F8f(L)J@)JfHtN5gC*7Yd*NUAp?kH^$jt:_.Aas'*5a^L=aD;1B&=P-fq.13j"YPn8?5BgZE!BSeeD8W;r<@mC6?%>h0BfQ4Qce.!7Pi1QXIGLA3^$6`'6#EX]-\GpmNa5JL>-8J37'!]f*tKXfmT._0+I*<RKq5D<V]J6m\QrG\_!]>N,e1$Amc-b0@%%KBDEK*2_LRWR)mKMQ@(5GTcdMb-Jf(q]5+K`ltQ6m@+tHCl!b6(THO5[C0)/jr"AV8fDmTjA6u.5):g0TON4c9Z<NY#P\G8FWADs%,H=4<.i0*b9up_XX=JiQak.t*o6nV9%R^NXg\oj<=5.<N1+Pd-j^0C4;nV>>ji!B5)HoFqDb!d9HakV*.68>D&cIaq66`N/:9g9P%i_ShIGJQ8soejZ@"/4$`<Na0&7h_o8@$XDb\]JJk3$T="dou<(`GQ"EA5+'_"Sh6T3F(+?Q!uVWR@rAUH'YTr*fnN9PDTc7Y_-JL%9A#=VQ-YD3Yo#Hl+Rlp0j/A;*ZJ=Ki8F?^5jjV9&NOgm>hu!1\ij27#90BY$`*^`F0msLMNT*A_(4r<eM)\s@%7d[%4kUD(duc,L%a>K.<."LT*T8571'8Fk0$j,PEe<-k5<W\,1NdNRF7Xn_O0lSK5/RIqaAMubSm]Je7s4S+HT\TH]#mhkHFDN3o:m!J+11)&1]=Ae!%8HLCrO>Z\^]kiEkEoDA>qC;'4GtFTm93(MD6;EVsaUsWL)<`TAS!SM]ajL2PaF?k=Us#0GK0<Xn:)oE)j>&L6pEL*DKM9j)%ZE%'%=;86UR.trEjZ&+MO'-$/P>BLB(tVA(gh.`t3!XT6Sk>]%O6Z%oRO8Z.mqYuf:%RLtROYY]?'(BHlR)C!)s!+`4.haKkR9k34#OBe%<!EtJV.4sV,)kSF/A^U1Bra`n`Du!?q[q'5o<<<^XhDNApt^?>Q>bUN_igDo?4P.6Krpa9b)iu]C"!r_%a2ZSYXH3Yo<?1-`m]sc%&rceT8VQr*i0+\p5iT"ibR[@Z-[-PrDnUKX/1WP9Q.rscq3<\b=+N%L59r"ok5A+X!QertKe=%no]7Ae5:=2Z%!eT$XVn\i&tt$%%X6?L@Zt':,q"ouoVX9Yk=@Z0s/=$CK1aClC#c(B$]\ZukYpo16)J@"?(.c&SAc4?FfG'AAV>q,GSqC/6qg/`mc+B\b4(c-)'q7.*%Kd1;5"STe&8:uth^\,os"oa3R..)ogaN\=u/jB0PAS/QkOgHV?ZX&-N&.BB`*^/\cRW_-KS(L]?BSV"?";9J+1#Ec)e'$BJbMW0j%Z7fB_=e1euN6+3B8MJOm9f^*q;HH(_3'=hXk1igk,hgTh1LaNu@'2r,@1%U#O_m^(;QBYWE/p\"9<Q33.8>[8>%C)rM[[h:8>]To%4g[b-%fY._7ImuA<LZC7g^WGs7qe$F,V:dUclrQJ/WpXS4\<rWrANej9@BbQ$t:^:j7j?816><Vh^1OD"$#)hXX"BAFoYf&2ALH=%ipJRA&4hTZa'9UGa>!0S-aS#eLEr65FlcPMk^221%NJ("+>=H6+PY\^h64M5@=Wh>9e:qu**a1)^89a/'M[&0JKm`'"D5LN0h11W%("$qshEi'pYm;.E.^a_pi;/*\#UG(S@kJ2$&gL>u?i0RA%-UM/LFbuXbVB(J/X_Y'Y6j#<ef8!'&l2FU7@IqHJrH'F#g>^<Lj\2_%0i:2VA^-]lFLcHQRc*u^^!tC9>SL_e6pY3-$;_BAJ1_0u(]%/J"Vs*:U&]2-m;>K030HZq?m,jY1Joh_(Imc^;'e(dQ3EYF>"1-@%e*!I@JWL#<Z^q:#?g1\7P51BJ0!$-=Q:On)&%p[pfsiLQfA3rr<Oj<RW^"`\#p!`b,IY2-p7#/C$K,Ps?F<R_MS/[VdiT'H+;Yjq%BY_=VRVoro22btl,XX*o^2F4/m'VLgH.tT5k86tt<),(h1+[CRc6?dK8+<jZ-:]]MRQ,R3kfU;4>?;p@7#pM9g;MM$5f?d^87?[1%$jnqD+ZbuXJ#B.:@F8XH<;+T9%N@5ji\W54s4u\e/mMa+(,kP!0D"`0HE6p;a_g5\ZdkmM\)jlb\pXW__T7kU'o[(+5;I@D.726'%hj%_\NPg:-e+Anui@&N:7u2)4Jl^?2*T+gsljtJekD>$8RR8-X#XP^32#3G?S:JrKkE2$mNIW@s;Fq/c5(.gbL&@qRo4i"N8[,t>%*Z1d9(freDR65>ri>mL.]>Oscm#_Zee0IZ\XcWi.=K6"gaM?XpH)">?h]1DO1lA.o6cP;urRCKfk+7&u+4B/f'/sDjQj[5e+>NMC%!m,5=*l!`Yb:*U,j*^:TR*(ed;g8Gb[1(=sH%G'>,Ta2LN^Mg2@J9AV&Ncllo5b6i<7-NhS-$ZKjq[LS.WO3aZiF&J9dd$=WbbTu%V%R0kPXBU`4mkMa1[6D%pmKGV1i`4:SP`eap"Ik4j[_G-!fJia0KZ$`Q?Td&3TAY96t'8&bJpkaSY&c1`$+e3l04FYQ7<i_`[Ul/%R,/teiG3M6H.p0k^.08Z:8K"'4\]'L%t,Qf/mIF]N_sZj,c1m62&1;Nq__Lk"lW0.(;hg!1l7&aV&FF.o5g-P%SY:GjAuCsF:\Ee%m7W7gp_`Uoo$Y!C=aa4$9Bcse63S"]=qY2Qm<\C^j0VDknu-%N0QS'UJbuPj62B1j:OiH?eI[%KPVHg0YN.=hQ*QVLl#s[_8L,F?%g4gsCjtak?auu=?1/-`V95Q>Yg?U$kQkOM`Eg#<?`],.bmN*0aocU)_hTA%BY1h/o*.p\)QK[f1*![Oj#/4??4a\tIT6J#@+U"1n%3KQnn^coKc$%CP%jNq*l.5[/]IjSrjo@8c#):9r'\C*N^>ts90J-0Nk4&)JG@SE*4>BDJGb_IqjA7ITlL:iJ*5XRt)kapd0dVqr\%XI`ojAC59\4*.C#G6YM\PQK7fe3i5^A5o%3A5bY20e/5HBRYmR4889ifU[#%"mP<UEef2EF^j?2`tMdb*)4f?RBLuq\!r1!R8f]O%:c4;';:fhXBI`"c$"K"L:L`mH!.IMka[-9N*,/R7XePNpplLklcKq]<O'^ik[lJm*N[+uhYc5R!2>(k47G0HN57'I-gonV$LGY,d%m2n)gU48PNjfS_e,lu6QM2AXUA@9eYOI)!YZOOMI?^r\pC.s=tr_O3]OqE02j-uJ2rJ!_^eE<#G!>BLUKV9iQalXaoW-17ClbaLD%-kq#]4H#Xr)0I<XIkS>FehElH9+?a$T\9S`.Y&g'NVlI(^Baq\\33@"?b:OIB_Aq_Y9aVcXM%sY;[L4b:.`dtLFj&lKAoE+G+Y,#%9.=FO)5r8n')m'phuh#Np3C+hJ$F1.r6:^;akCE`cTPGMV<"=]<Wpg6!DQN,ODd`VlKZe"TjC0k13C!*P"Js)HZJj/=W^PAbL=d"%J&&loLp26eB*-bjHtKJ?<OK[cMP,c>5b@MOc=ps#(i-+JVNbA5,fHT(0OD<\\\Ws`&IYD5hZq:2#%8Hjb5kRAj<aLJ;hFX03[mO"%hE*-pM2>u8`r4=F(8;:<>+&$(OFMYaJj\a'4Bk6=7;:at`9Q4!d5,BB5ZD<3@K7Lk,KUH0eqLO<ADMP0nU'X@kDFZZW[UOl8HZo"%OEr#ml$E`3c]g<;BB>Gop(+bS^V$_CG?Qt_IV#Sg'+_jKk!7:)K'8qES;ZWoGcXkZL''j\P9Xcr).isEo>Gn'EWdJr9#<$G7aTIb%[WH%2H@qZZfH1C6p[QKfUm5pYH+kZR0.NJbq1o3YME3qt_%=s=(-2<p&Ar]sS$(8(oTGU6MZZi$3+5Fo!&E&T+Hd*!I['/tm#+IL%V&Z=>Ng\o.DJgRjY*8&c^smlG6Pq$j)OR'(Fe>"Jll_i6Fe?#-^aaWLA]1P]89jkBVXt8GUbi/GYOHm3<BkVSTiFe?R7_1LQd[TI%"H?m;#oFL/`WA1'UJeG$EeG@He@WQ4i8!jf*\T;q.c)$[$#p0hJWYKqlbXJUr4I#BP_$ZRR"piOO-;86HU4Kc8I39CK..6&.!8,0%/SAH:`#0DC.0BYel(s_"n^i1#qEZFT7i>c0QbN2"BIn=.+ie'>$joiZSo(,j2k>jqh`OZ1*kS&S-)FB[QK2A$Vq@6$j'#jfga]e[%.XY$);3<N?EsZ4,93KGDDL)8d15:62@6@7J1M6IppeC?T?N,i;SU<:Ea\MVtAuTDlP$V'+*#UL=niO[FHFlC;N!':7:9VC(.qf#,%DG$f;R956q'XMN];+AV0q=nRi9ju%T1Oih2QoVV7R5HFEhqODTDkmJ,;Bi?c<^i4u\LLk+h)X+:=9@J)N'_tn35m>1OOt)('n%A6%Ladf,map=/kfX^]B?_L!JCK,RJ4YK*hJ8IsPZJ*R,PIBq21+1O*EWVf#M+I*!t1K$]pSt<>O1k<9o'4j\^S]0dFEP9-rVU<8Qng^%@3rj_=:%nZ((b),EA&*A=28K@?E@<fH[PBnU$[0XWEq.LYhaoXMfg0-`CcMg]1aNM(Qe3oWd[>0@\HfPfLIK5gCZ)6/-&&]N&[gf%*d6+W6RNW\jY!Q[MF6(>cfE!\QmeNQ$gfQ1<KCniYS,qZX955b!MTdtqQO'\/^3]mTa>o\8Ml'B2U#aWI=`'qo+:X583)F"Pce\@%@0PR1XLF2Io"jK8**C"D^!&WA5V?L:WX#Tq--+QB#7DPkbsFQq^b0UfWs=QHEK0%r8r3AK&uJDTel4J2JaOs0'#<Kj/<6+f6+%9:%"0,C"K*(Vbc("U7\?,QIiPS7iUHYbhW76Uq5('7=X!0dlb]C@N(Mk;Pch\'%UG^Pl.@P%i*N\OZWk!_12:W3e3sZP&]Cr&2B#M,F%@&CJtaOO<h8t3K(Qo.sPWE_4q.M8j.RVOGEYY*JOn]9@m8nbBp2DK)I)hZ!68=F="&j.535k:B/5o._qO`VoRAt!L@7K>?;']5sk%-(*iKDREB:'Xj(Za,/s4MBkp=RVOF:*BuA^]Y&D6`O/]UR^h@g+jodX)<M;:`AN`R>Vd^aX"Oi^>[*1$fG%C\bH7iM;-]6doJ0X5%-\p#65$o?==S22r=r`qZY(=MWm?f?*<Sou2/,XN3,fR/uOpa4R+b4^/*iNSS=pe.KFl9PF85ZW(QlW:L#rY7.PA=A8WLJrmVPS\&%=c-o=3JaupQbH:2mSj%$8dlc[+:aA_o%K2t[[c-BY<O=,)$'tS7QuWA,P,FrBP@-uU>!gLbb\Q!&>^]brLWp^Y]/A<QoOM1HbY_B%,he=o<OC92.pC)Aj!nt:PQm<IXB-l,%c^DX6f/GEokMb.OI_"p].C,*`a88'qW7>s0d`kLe?8*hZdt*s:3Qj'qR@H0\jR_4;HPls%#RsV+%\sD@j1q#c!sfR9d5sp>]+O!%KO3,HKdl;qc,A?h8F@!VC>O*(42`l8$N\on:$=Y1!`\6A\WllaHm)mlXr(NE1,O5&H;Fbo%nTjuW6l;rFmRoKIPU[GuV1^!7$sO(Q;!g6Wk"hl_!Dl"[dY/;HlQfuiCJf6)=99+dJ1u%SU'gu8MK+kIEWNkX-=$n5W*)k3WdOG7%>=h%>&15J;+qVb)p?27>kX$+Z&$sea6h3kf?RPqpp1-i66^Rs!r7HH%_Rs!r"ffd4V>'u4emB$XAh&Mi+AG6^q%=!R`_^'_(ufKi%JDOiqnhSO2C7f1i\;sNlU[6-_k/#%)R5$1MT`\34d".;k!b>U^DcP'/RWg7&Q<.ZI`_J5)d"*TRk^<uP$B1Bi4],d>ECH,T8Jmdp%]0uekE[6_h$meRR4Buc&O&1]7m]KcH1R'SHETJE[W>+c.ReVh$A/sjb27c=s,-V+th;We!c7L=N*Jb>_!].\ie/gc%*L@T&RT]LP%_.u1fb%)WA+O_<2Ai+g/q9(&!URn;-,g2NE7[,Tk0I%!+U^J"XW$WG`3?Hn>rROM&o%`nS65<Np.TLV`)J/+tPV\OX,n0l(Uc=d-%b$8UKBh^o46DK2GBVZgDASIg-f[0m+ALJ[6$jEG[TurU1/*et74&OI\i"p$@nO3%J5'P!`8r,9XhIf!B;e%<K_>3I5R9-#><PJ(q%aG,d&&r?/6"#GE'<e0oNE;1]6V4L6[C+NpXH)[d"=e+@j8?sHAHfB7_jH-RSmMWj3%CqO-(UWlrm2<R$6`Q$5:Q>Rm4^lgjS7WBC%pDH0HP<VdQIBAG/&Vm./gCrT-K#!?%?BLUujOglLhS"^GjAr't`I+Dp11m+V,\;?YLUo6Zj09lme<'H1LAB>D]YS$GO<Fjqr6DQu%<tk;1!$>5>nfk2uijIjWX,;:t:?tpo.-R4.W`\8FTk8KkO!Rs:/7"o[9GT\AbelEM'J]U#,`&<E4ul6[Vs,)B$abk[+E@mnQH"+X%&iN`cT2cp<Q<Z#gg-A]HE![^q*'PNI7k&lDNHtbq<XI0DloGmU;pKARR#])@8F$hp=:FRZkcnUnTp#;QE]6QZllP\64XL15<nsGa%8.AWoR'"p%bm\sq9AoV`+7e9">%Z=H-DoSIUB)piD9(tk:\h>%EiEA2W,$R,nDo#U0;pb#]_*`<k$C[=I1pa*b2.7D([e<4#8UQu%^j>paXrK6)O_]'AIWkOPM@.;p:E;Pf_X_dWB1Ck7"pZK=M:u1YlQ0m[-aB!iI<sa;kfnO`Zo^$PRR5"HH/tN+g(#4k;cHBanZh7D%H'<6h4FYcGV+0[,Z<m[DjIZA2S)p!&-5*A$[Jr4(^G9Em"B*jB)'j?)8TC0]BiW9JH'Bef?>54&,`lsbAW2E4*[;60/gVPEY@ZOY%G0aa\\r@aHOq`l4F>$hnGkBKi=PPh^,jZ/aMS?F5H4JZa*mEN5R9?%n3UF^GF/bm2]PbKZGJ)qN$4u*C5[BrrrB)fSA:PH8],5a8%pn0"$#bGm>:M,X^o_I<K7VM(9Ho(;1R&jM[`Rs_egOur^2ru%^i_eJle15"Abu>-GrJQpI2)T?@V^B/K%G6aq:B-]MC.h4q,+3Ic%Rul`T^LLplh%RtJF)UkYs'@Mi,XS#6:'"`D>cru<Bk?k/+YP[`er&SuGsFMfn^T3#%1Gl./g7S]n2n\_<H$BoQ!.$!8bW3/Nd4"Q%H^`Y<Q/^7dX9ilIB_^,;)"@kD#:*/<3bYFmGL&Cc$TZ>qMRCXdJ/h%>G)ob;/k];)jMeQ\9ZoMe0]=RhU99h=I$=r0>B1;^?B7)3%Oi1.X_mnpHW(W)ahLkm>a!8/A1VOn90<o&`'Y>[K1Iq4d7c)>0-omp4iu8X]-0?8!-K0lOBD"NWi)kH*R,7'r7J^C!#"@mobPXt_%qO$Y$`+N!'*<:c7r@#8<i+pqUXKYnaRppo5*ED`tJWG[=g%@*$535(s<,*m'`XeGqfNi#qju?Y-`S'7`SMHn6C&`'rp]mqllh?26%8.:EP.l$([0itBXoA`W][7cmum4eYTY3Xj8F]8<]\_]N"s5S>'mQ^FFp=FfngWr+^T0N>:YQ!h-msb#'s6upNrg1CtiU?dFO+6uq%VgnW^s8(d%5Q(?'s6rg6pnp@Uci#L]s7DXBro66A_dEE<o,n"Q5Q#FBq^5GBGJF%@s7@C^r*SKo?D@~>%AI9_PrivateDataEnd